{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of 2D Random Walks Class","provenance":[{"file_id":"1ccReAMFUvdTmhdQSEJTbrI4xpqxJiJws","timestamp":1618757066814},{"file_id":"1BECh44B0c0XcfxdfBGX7QD8CjLJKLERr","timestamp":1618423946226},{"file_id":"1X3SQKDDLt0HWiCQlOxmPgf6i4QxgTtYx","timestamp":1555082393859}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"B5LdCuYeMj9F"},"source":["# Two-Dimensional Random Walks\n","\n","*Math 242 Modern Computational Math*\n","\n","Imagine you are standing at the origin of a plane. You choose randomly among the four directions up, down, left, and right. You then move one unit in the chosen direction. You repeat choosing one of the four directions and moving one unit in in that direction. Repeating again and again, your path in the plane is called a **two-dimensional random walk**."]},{"cell_type":"markdown","metadata":{"id":"sT47Ot9IPn_H"},"source":["## 1. Generating a 2-D Random Walk\n","\n","First, we import some packages. We will use a 2-D matrix from the *NumPy* package to store the locations visited on the walk."]},{"cell_type":"code","metadata":{"id":"BkZi4o6qEYlk"},"source":["import random\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nYh1ZVIPQKS6"},"source":["Write code to generate the random walk:"]},{"cell_type":"code","metadata":{"id":"3KTX0NF8FeN3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618757101737,"user_tz":300,"elapsed":467,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"c4fd8871-58de-4d7d-da40-d7527abd2119"},"source":["# define the possible moves at each step\n","dirs = np.array( [ [1,0], [-1,0], [0,1], [0,-1] ] )\n","\n","# define the number of steps\n","numSteps = 50\n","\n","# set up a matrix of zeros to store the locations\n","locations = np.zeros( (numSteps, 2) )  # numSteps rows, 2 columns\n","\n","# take steps and store locations\n","for i in range(1, numSteps):\n","  r = random.randrange(4)    # random integer in {0,1,2,3}\n","  move = dirs[r]             # random move\n","  locations[i] = locations[i-1] + move   # store the next location\n","\n","locations"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.,  0.],\n","       [ 1.,  0.],\n","       [ 0.,  0.],\n","       [ 0.,  1.],\n","       [ 0.,  2.],\n","       [ 0.,  3.],\n","       [ 0.,  2.],\n","       [ 0.,  1.],\n","       [ 0.,  2.],\n","       [ 0.,  1.],\n","       [ 1.,  1.],\n","       [ 1.,  2.],\n","       [ 1.,  3.],\n","       [ 1.,  4.],\n","       [ 1.,  3.],\n","       [ 1.,  4.],\n","       [ 0.,  4.],\n","       [ 0.,  3.],\n","       [-1.,  3.],\n","       [-1.,  4.],\n","       [ 0.,  4.],\n","       [ 0.,  5.],\n","       [ 0.,  4.],\n","       [-1.,  4.],\n","       [-2.,  4.],\n","       [-2.,  3.],\n","       [-2.,  2.],\n","       [-1.,  2.],\n","       [-1.,  1.],\n","       [-1.,  2.],\n","       [-2.,  2.],\n","       [-3.,  2.],\n","       [-2.,  2.],\n","       [-3.,  2.],\n","       [-4.,  2.],\n","       [-3.,  2.],\n","       [-3.,  3.],\n","       [-3.,  4.],\n","       [-4.,  4.],\n","       [-4.,  5.],\n","       [-3.,  5.],\n","       [-3.,  6.],\n","       [-4.,  6.],\n","       [-3.,  6.],\n","       [-2.,  6.],\n","       [-3.,  6.],\n","       [-3.,  5.],\n","       [-3.,  6.],\n","       [-4.,  6.],\n","       [-4.,  5.]])"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"Ox3AA7rDrQZO"},"source":["Now plot the random walk. To do this, we need to supply a list of the $x$-coordinates and another list of the $y$-coordinates of the locations. Since `locations` is a NumPy matrix, we can use `locations[:,0]` to get the $x$-coordinates, and `locations[:,1]` to get the $y$-coordinates."]},{"cell_type":"code","metadata":{"id":"7_4-H67OmT6i","colab":{"base_uri":"https://localhost:8080/","height":341},"executionInfo":{"status":"ok","timestamp":1618757106675,"user_tz":300,"elapsed":1026,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"ec617f18-71ef-46c2-c78b-a88f5554c2ef"},"source":["plt.figure(figsize=(5,5))\n","plt.plot( locations[:,0], locations[:,1], alpha=0.7 )\n","plt.plot([0], [0], 'ro')\n","plt.plot(locations[-1,0], locations[-1,1], 'go')\n","plt.xlim( [-10,10] )\n","plt.ylim( [-10,10] )"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-10.0, 10.0)"]},"metadata":{"tags":[]},"execution_count":3},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"LkaMnypERXWT"},"source":["## 2. When does the walk return to the origin?\n","\n","We noticed that 1-D random walks seem to revisit the origin somewhat frequently. Is the same true for 2-D random walks? How many times does a 2-D random walk return to the origin in $n$ steps? What proportion of random walks return to the origin before $n$ steps? How does this depend on $n$?"]},{"cell_type":"code","metadata":{"id":"ffk0DnCKR0HD"},"source":["def randomWalk2d(numSteps):\n","  # define the possible moves at each step\n","  dirs = np.array( [ [1,0], [-1,0], [0,1], [0,-1] ] )\n","\n","  # set up a matrix of zeros to store the locations\n","  locations = np.zeros( (numSteps, 2) )  # numSteps rows, 2 columns\n","\n","  # take steps and store locations\n","  for i in range(1, numSteps):\n","    r = random.randrange(4)    # random integer in {0,1,2,3}\n","    move = dirs[r]             # random move\n","    locations[i] = locations[i-1] + move   # store the next location\n","\n","  return locations"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xtZN4B52pQwe","executionInfo":{"status":"ok","timestamp":1618757112951,"user_tz":300,"elapsed":1105,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"a8321b81-a35e-4676-c36e-1c75a5b83c86"},"source":["w = randomWalk2d(5)\n","w"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.,  0.],\n","       [ 0.,  1.],\n","       [-1.,  1.],\n","       [ 0.,  1.],\n","       [-1.,  1.]])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K6ax2tNepnEB","executionInfo":{"status":"ok","timestamp":1618757115871,"user_tz":300,"elapsed":455,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"8a637dca-f0ca-457d-ef0a-8b4e3c653ba2"},"source":["w == 0"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ True,  True],\n","       [ True, False],\n","       [False, False],\n","       [ True, False],\n","       [False, False]])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iENMdBzLp5FZ","executionInfo":{"status":"ok","timestamp":1618757117700,"user_tz":300,"elapsed":301,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"8ae4686b-cf41-4736-c0b3-0f58f9a21154"},"source":["# find rows after the top row that contain all zeros\n","np.all( w[1:] == 0, axis=1 )  # axis=1 means find a ROW of all True values"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False, False, False])"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XsMd2E0gqhxR","executionInfo":{"status":"ok","timestamp":1618757120043,"user_tz":300,"elapsed":1219,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"32c9a08e-f5e2-4bc5-b017-c0c67e01726a"},"source":["np.sum( np.all( w[1:] == 0, axis=1 ) )  # number of rows, after the top row, that are zeros"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"__OPKF_OrCuZ"},"source":["# function to simulate a random walk and count the number of returns to the origin\n","def visitsToOrigin(numSteps):\n","  w = randomWalk2d(numSteps)\n","  return np.sum( np.all( w[1:] == 0, axis=1 ) )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_gM6yEtrS8v","executionInfo":{"status":"ok","timestamp":1618757122451,"user_tz":300,"elapsed":461,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"25f01ed2-3db6-46af-9fb1-a834014c3272"},"source":["visitsToOrigin(1000)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"TMcqZW35rbjA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618757128934,"user_tz":300,"elapsed":5413,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"5a84e78a-5707-45a7-8f3c-1e55c93cdc50"},"source":["visits = [ visitsToOrigin(1000) for _ in range(1000) ]\n","visits"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0,\n"," 2,\n"," 2,\n"," 5,\n"," 4,\n"," 1,\n"," 2,\n"," 2,\n"," 1,\n"," 0,\n"," 3,\n"," 2,\n"," 3,\n"," 7,\n"," 0,\n"," 3,\n"," 2,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 0,\n"," 0,\n"," 4,\n"," 1,\n"," 0,\n"," 0,\n"," 3,\n"," 0,\n"," 11,\n"," 0,\n"," 0,\n"," 3,\n"," 1,\n"," 0,\n"," 3,\n"," 6,\n"," 1,\n"," 9,\n"," 0,\n"," 2,\n"," 0,\n"," 3,\n"," 8,\n"," 4,\n"," 0,\n"," 2,\n"," 1,\n"," 1,\n"," 3,\n"," 1,\n"," 1,\n"," 2,\n"," 1,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 1,\n"," 1,\n"," 2,\n"," 3,\n"," 3,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 4,\n"," 2,\n"," 1,\n"," 3,\n"," 0,\n"," 2,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 1,\n"," 1,\n"," 0,\n"," 2,\n"," 5,\n"," 0,\n"," 0,\n"," 4,\n"," 1,\n"," 0,\n"," 6,\n"," 3,\n"," 2,\n"," 0,\n"," 0,\n"," 3,\n"," 5,\n"," 2,\n"," 0,\n"," 2,\n"," 4,\n"," 9,\n"," 0,\n"," 0,\n"," 1,\n"," 3,\n"," 0,\n"," 8,\n"," 3,\n"," 0,\n"," 2,\n"," 0,\n"," 2,\n"," 2,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 4,\n"," 2,\n"," 1,\n"," 0,\n"," 3,\n"," 3,\n"," 0,\n"," 3,\n"," 2,\n"," 5,\n"," 1,\n"," 0,\n"," 1,\n"," 4,\n"," 0,\n"," 0,\n"," 4,\n"," 2,\n"," 0,\n"," 3,\n"," 0,\n"," 6,\n"," 2,\n"," 0,\n"," 1,\n"," 2,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 2,\n"," 4,\n"," 3,\n"," 6,\n"," 0,\n"," 4,\n"," 6,\n"," 0,\n"," 2,\n"," 2,\n"," 0,\n"," 0,\n"," 1,\n"," 3,\n"," 0,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 0,\n"," 0,\n"," 3,\n"," 0,\n"," 1,\n"," 4,\n"," 0,\n"," 0,\n"," 2,\n"," 6,\n"," 1,\n"," 4,\n"," 0,\n"," 0,\n"," 1,\n"," 5,\n"," 2,\n"," 6,\n"," 8,\n"," 6,\n"," 0,\n"," 0,\n"," 5,\n"," 3,\n"," 0,\n"," 0,\n"," 10,\n"," 8,\n"," 0,\n"," 1,\n"," 1,\n"," 2,\n"," 3,\n"," 1,\n"," 1,\n"," 2,\n"," 4,\n"," 1,\n"," 2,\n"," 1,\n"," 3,\n"," 1,\n"," 0,\n"," 1,\n"," 0,\n"," 5,\n"," 3,\n"," 4,\n"," 0,\n"," 5,\n"," 10,\n"," 5,\n"," 6,\n"," 1,\n"," 0,\n"," 1,\n"," 1,\n"," 0,\n"," 2,\n"," 0,\n"," 1,\n"," 7,\n"," 4,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 5,\n"," 0,\n"," 6,\n"," 1,\n"," 2,\n"," 0,\n"," 5,\n"," 0,\n"," 5,\n"," 1,\n"," 0,\n"," 0,\n"," 3,\n"," 0,\n"," 5,\n"," 7,\n"," 22,\n"," 0,\n"," 5,\n"," 4,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 4,\n"," 4,\n"," 0,\n"," 1,\n"," 4,\n"," 3,\n"," 13,\n"," 0,\n"," 9,\n"," 0,\n"," 5,\n"," 2,\n"," 1,\n"," 2,\n"," 3,\n"," 0,\n"," 8,\n"," 4,\n"," 4,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 3,\n"," 0,\n"," 2,\n"," 1,\n"," 10,\n"," 2,\n"," 1,\n"," 2,\n"," 2,\n"," 0,\n"," 5,\n"," 1,\n"," 2,\n"," 4,\n"," 1,\n"," 0,\n"," 5,\n"," 0,\n"," 0,\n"," 12,\n"," 2,\n"," 0,\n"," 4,\n"," 3,\n"," 0,\n"," 2,\n"," 2,\n"," 2,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 2,\n"," 14,\n"," 9,\n"," 0,\n"," 0,\n"," 0,\n"," 3,\n"," 5,\n"," 1,\n"," 0,\n"," 2,\n"," 2,\n"," 2,\n"," 5,\n"," 5,\n"," 2,\n"," 3,\n"," 0,\n"," 3,\n"," 0,\n"," 1,\n"," 0,\n"," 1,\n"," 3,\n"," 0,\n"," 2,\n"," 9,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 5,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 0,\n"," 1,\n"," 1,\n"," 2,\n"," 3,\n"," 0,\n"," 0,\n"," 4,\n"," 1,\n"," 0,\n"," 0,\n"," 2,\n"," 2,\n"," 2,\n"," 5,\n"," 2,\n"," 0,\n"," 1,\n"," 3,\n"," 1,\n"," 2,\n"," 0,\n"," 5,\n"," 0,\n"," 3,\n"," 3,\n"," 8,\n"," 0,\n"," 1,\n"," 0,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 4,\n"," 4,\n"," 1,\n"," 1,\n"," 0,\n"," 3,\n"," 0,\n"," 0,\n"," 4,\n"," 2,\n"," 0,\n"," 0,\n"," 4,\n"," 0,\n"," 8,\n"," 4,\n"," 2,\n"," 6,\n"," 3,\n"," 1,\n"," 3,\n"," 1,\n"," 4,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 3,\n"," 6,\n"," 3,\n"," 2,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 3,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 1,\n"," 2,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 4,\n"," 0,\n"," 4,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 4,\n"," 0,\n"," 5,\n"," 1,\n"," 0,\n"," 5,\n"," 8,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 8,\n"," 6,\n"," 7,\n"," 0,\n"," 7,\n"," 1,\n"," 4,\n"," 11,\n"," 0,\n"," 4,\n"," 0,\n"," 2,\n"," 3,\n"," 0,\n"," 2,\n"," 0,\n"," 1,\n"," 3,\n"," 0,\n"," 3,\n"," 8,\n"," 0,\n"," 1,\n"," 6,\n"," 14,\n"," 0,\n"," 2,\n"," 0,\n"," 4,\n"," 3,\n"," 0,\n"," 4,\n"," 7,\n"," 5,\n"," 3,\n"," 1,\n"," 0,\n"," 0,\n"," 1,\n"," 1,\n"," 2,\n"," 0,\n"," 1,\n"," 7,\n"," 0,\n"," 3,\n"," 5,\n"," 3,\n"," 0,\n"," 1,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 2,\n"," 1,\n"," 0,\n"," 3,\n"," 1,\n"," 0,\n"," 1,\n"," 0,\n"," 2,\n"," 1,\n"," 3,\n"," 4,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 1,\n"," 12,\n"," 1,\n"," 1,\n"," 6,\n"," 5,\n"," 1,\n"," 3,\n"," 4,\n"," 1,\n"," 0,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 5,\n"," 13,\n"," 1,\n"," 0,\n"," 4,\n"," 1,\n"," 0,\n"," 0,\n"," 4,\n"," 2,\n"," 0,\n"," 2,\n"," 7,\n"," 0,\n"," 4,\n"," 1,\n"," 0,\n"," 2,\n"," 8,\n"," 1,\n"," 7,\n"," 11,\n"," 0,\n"," 1,\n"," 2,\n"," 1,\n"," 1,\n"," 1,\n"," 1,\n"," 2,\n"," 1,\n"," 6,\n"," 1,\n"," 4,\n"," 6,\n"," 1,\n"," 0,\n"," 2,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 11,\n"," 2,\n"," 0,\n"," 1,\n"," 5,\n"," 3,\n"," 1,\n"," 1,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 5,\n"," 2,\n"," 4,\n"," 2,\n"," 1,\n"," 2,\n"," 0,\n"," 1,\n"," 4,\n"," 4,\n"," 0,\n"," 3,\n"," 8,\n"," 1,\n"," 6,\n"," 0,\n"," 2,\n"," 4,\n"," 3,\n"," 5,\n"," 2,\n"," 5,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 2,\n"," 0,\n"," 7,\n"," 0,\n"," 0,\n"," 1,\n"," 2,\n"," 1,\n"," 6,\n"," 1,\n"," 2,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 3,\n"," 3,\n"," 1,\n"," 2,\n"," 0,\n"," 0,\n"," 3,\n"," 6,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 3,\n"," 5,\n"," 5,\n"," 4,\n"," 0,\n"," 3,\n"," 4,\n"," 1,\n"," 3,\n"," 0,\n"," 3,\n"," 9,\n"," 2,\n"," 0,\n"," 3,\n"," 14,\n"," 0,\n"," 1,\n"," 1,\n"," 0,\n"," 12,\n"," 1,\n"," 4,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 3,\n"," 3,\n"," 1,\n"," 3,\n"," 4,\n"," 0,\n"," 4,\n"," 4,\n"," 5,\n"," 0,\n"," 0,\n"," 0,\n"," 2,\n"," 0,\n"," 3,\n"," 7,\n"," 2,\n"," 1,\n"," 2,\n"," 3,\n"," 4,\n"," 1,\n"," 3,\n"," 1,\n"," 1,\n"," 4,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 2,\n"," 1,\n"," 6,\n"," 0,\n"," 2,\n"," 2,\n"," 1,\n"," 0,\n"," 1,\n"," 3,\n"," 1,\n"," 3,\n"," 0,\n"," 3,\n"," 5,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 4,\n"," 1,\n"," 2,\n"," 0,\n"," 1,\n"," 11,\n"," 5,\n"," 3,\n"," 9,\n"," 1,\n"," 0,\n"," 5,\n"," 2,\n"," 5,\n"," 0,\n"," 1,\n"," 11,\n"," 7,\n"," 2,\n"," 4,\n"," 1,\n"," 1,\n"," 1,\n"," 0,\n"," 2,\n"," 3,\n"," 0,\n"," 1,\n"," 0,\n"," 8,\n"," 2,\n"," 0,\n"," 0,\n"," 1,\n"," 9,\n"," 0,\n"," 0,\n"," 6,\n"," 4,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 9,\n"," 0,\n"," 0,\n"," 3,\n"," 0,\n"," 1,\n"," 0,\n"," 2,\n"," 2,\n"," 0,\n"," 0,\n"," 4,\n"," 2,\n"," 3,\n"," 3,\n"," 0,\n"," 1,\n"," 0,\n"," 4,\n"," 6,\n"," 0,\n"," 5,\n"," 2,\n"," 1,\n"," 6,\n"," 1,\n"," 4,\n"," 3,\n"," 0,\n"," 3,\n"," 9,\n"," 4,\n"," 2,\n"," 3,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 3,\n"," 1,\n"," 1,\n"," 1,\n"," 1,\n"," 8,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 1,\n"," 1,\n"," 2,\n"," 0,\n"," 2,\n"," 3,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 7,\n"," 1,\n"," 1,\n"," 0,\n"," 3,\n"," 3,\n"," 2,\n"," 6,\n"," 3,\n"," 7,\n"," 4,\n"," 4,\n"," 3,\n"," 3,\n"," 5,\n"," 0,\n"," 0,\n"," 6,\n"," 4,\n"," 3,\n"," 1,\n"," 3,\n"," 1,\n"," 0,\n"," 0,\n"," 3,\n"," 1,\n"," 5,\n"," 2,\n"," 2,\n"," 2,\n"," 4,\n"," 5,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 1,\n"," 1,\n"," 0,\n"," 0,\n"," 2,\n"," 6,\n"," 1,\n"," 0,\n"," 0,\n"," 2,\n"," 2,\n"," 5,\n"," 0,\n"," 3,\n"," 1,\n"," 4,\n"," 2,\n"," 3,\n"," 0,\n"," 7,\n"," 2,\n"," 8,\n"," 9,\n"," 1,\n"," 1,\n"," 0,\n"," 1,\n"," 0,\n"," 0,\n"," 4,\n"," 2,\n"," 1,\n"," 1,\n"," 3,\n"," 2,\n"," 8,\n"," 3,\n"," 0,\n"," 2,\n"," 0,\n"," 7,\n"," 2,\n"," 1,\n"," 4,\n"," 0,\n"," 8,\n"," 7,\n"," 1,\n"," 0,\n"," 6,\n"," 2,\n"," 1,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 7,\n"," 0,\n"," 1,\n"," 5,\n"," 2,\n"," 1,\n"," 1,\n"," 1,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 1,\n"," 9,\n"," 2,\n"," 1,\n"," 4,\n"," 6,\n"," 3,\n"," 1,\n"," 0,\n"," 4,\n"," 0,\n"," 15,\n"," 3,\n"," 1,\n"," 6,\n"," 2,\n"," 2,\n"," 1,\n"," 4,\n"," 7,\n"," 4,\n"," 1,\n"," 1,\n"," 3,\n"," 3,\n"," 0,\n"," 0,\n"," 2,\n"," 2,\n"," 0,\n"," 1,\n"," 4,\n"," 0,\n"," 1,\n"," 2,\n"," 0,\n"," 0,\n"," 3,\n"," 4,\n"," 8,\n"," 4,\n"," 4,\n"," 0,\n"," 2,\n"," 3,\n"," 0,\n"," 7,\n"," 0,\n"," 3,\n"," 0,\n"," 0,\n"," 1,\n"," 0,\n"," 9,\n"," 1]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K2y5ru7XsDVf","executionInfo":{"status":"ok","timestamp":1618757128941,"user_tz":300,"elapsed":4825,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"507e696e-3f56-43a6-a085-4f1643f82a72"},"source":["binvals = np.linspace( -0.5, max(visits)+0.5, max(visits)+2 )\n","binvals"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-0.5,  0.5,  1.5,  2.5,  3.5,  4.5,  5.5,  6.5,  7.5,  8.5,  9.5,\n","       10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5,\n","       21.5, 22.5])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"geSaCj0brpb5","executionInfo":{"status":"ok","timestamp":1618757128945,"user_tz":300,"elapsed":2846,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"58c6096f-674c-4f31-ed12-9fb449226d10"},"source":["plt.hist(visits, edgecolor='k', bins=binvals)\n","plt.xlabel(\"number of visits to the origin\")\n","plt.ylabel(\"frequency\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'frequency')"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"sqaU6o485Syk"},"source":["Write a function that simulates a random walk up to numSteps steps, or until it returns to the origin. Return True if the walk returns to the origin, and False otherwise."]},{"cell_type":"code","metadata":{"id":"M7bZtF7f5d1m"},"source":["def doesItReturn(numSteps):\n","  dirs = np.array( [[1,0],[-1,0],[0,1],[0,-1]])\n","\n","  # keep track of the current location\n","  loc = np.zeros(2)  # [0,0]\n","\n","  # take steps\n","  for i in range(1,numSteps):\n","    r = random.randrange(4)\n","    loc = loc + dirs[r]  # update the location\n","    #print(loc)\n","    if np.array_equal(loc, [0,0]):\n","      return True\n","  \n","  # if we get here, then the random walk did not visit the origin again\n","  return False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eAKyvnm-6UPN","executionInfo":{"status":"ok","timestamp":1618757131099,"user_tz":300,"elapsed":463,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"04c214f3-7705-4d88-94b5-492a85b74ef5"},"source":["doesItReturn(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"sRMrnVj-78_C"},"source":["# function that computes the proportion of random walks, of a given numSteps, \n","#   that return to the origin\n","def proportionThatReturn(numSteps, numWalks):\n","  vals = [doesItReturn(numSteps) for _ in range(numWalks)] # list of True/False values\n","  n = sum(vals)  # number of True values in the list\n","  print(\"finished numSteps=\",numSteps)\n","  return n/numWalks  # proportion"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aXwLo-Ex8xKu","executionInfo":{"status":"ok","timestamp":1618757135070,"user_tz":300,"elapsed":986,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"585ceabe-3416-41f2-b2c7-acaea8ec04d6"},"source":["proportionThatReturn(100, 500)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["finished numSteps= 100\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0.606"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N9cFn-Gk84PD","executionInfo":{"status":"ok","timestamp":1618757138316,"user_tz":300,"elapsed":3057,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"b06436d4-f51e-4f8f-9499-e9a2021b1f3c"},"source":["proportionThatReturn(1000, 500)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["finished numSteps= 1000\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["0.7"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dr7jaEot9m8H","executionInfo":{"status":"ok","timestamp":1618757326677,"user_tz":300,"elapsed":187352,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"0eda8b67-f8b0-4622-94e4-4a4bf27de178"},"source":["# compute proportion for various numbers of steps\n","nvals = [10**k for k in range(1,6)]\n","yvals = [proportionThatReturn(n, 500) for n in nvals]\n","yvals"],"execution_count":null,"outputs":[{"output_type":"stream","text":["finished numSteps= 10\n","finished numSteps= 100\n","finished numSteps= 1000\n","finished numSteps= 10000\n","finished numSteps= 100000\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.38, 0.574, 0.67, 0.744, 0.78]"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":304},"id":"YOFmGrvJ-Ku4","executionInfo":{"status":"ok","timestamp":1618757327074,"user_tz":300,"elapsed":186056,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"307d5e81-ca56-4822-97ea-5fecac9d3f87"},"source":["plt.plot(nvals, yvals, 'go')\n","plt.xlabel(\"number of steps\")\n","plt.xscale(\"log\")\n","plt.ylabel(\"proportion that return\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'proportion that return')"]},"metadata":{"tags":[]},"execution_count":20},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"v5m8PZ0JDTrL"},"source":["Do simple symmetric random walks return to the orign? Yes. \n","Proof: \n","1D: probability that the walk is at the origin at step 2k is 1/sqrt(pi*k). The sum of this up to k? gives expected number of returns to origin. \n","\n","2D: a 2D random walk is someting like a pair of 1D walks.\n","proof that a 2D random walk is at the origin at step 2k.\n","(1/sqrt(pi*k))^2 = probability.\n","For expected number of returns to origin: add up expected probabilities. \n","As k approaches infinity, the sum diverges. So, each random walk approaches the origin infinitely many times.\n","Recall:\n","p-series converges iff p>1. (1/k^p as k approaches infinity).\n","So: 2D random walks return to the origin as well. Problem is they might take a very long time to do this.\n","\n","what about 3D? yes. \n","theory says it should. \n","At step 2k (it only returns on even steps for all Ds btw):\n","probability that it is at origin at step 2k is (1/sqrt(pi*k))^3.\n","Expected number of returns to origin is sum is 1/(pi*k)^(3/2).\n","It converges since 1.5 > 1. So, it converges up to a finite number. So, the number of returns happens only finitely many times. \n","Some 3d random walks return to origin, some don't. \n","2d: walk will epxlore every single spot on the grid. \n","But in 3d: it can go off in one direction to infinity and not come back necessarily.\n","it levels off at about 34%.\n","\n","\n","#Percolation Theory:\n","Start with a grid of squares.\n","n = 6 columns\n","n = 6 rows\n","decide whether each square is open or closed with probability p.\n","I choose which square are closed. Then, I pretend to pour water on top of the grid into each column. Is there a path that the water can flow all the way from the top to the bottom of th egrid? \n","i.e. can the water percolate from top to bottom of grid?\n","How does this depend on p? How does this depend on n?\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"xVc1LrDZR0N1"},"source":["## 3. Diameter of a Random Walk\n","\n","Define the **width** of a 2-D random walk to be the maximum difference between any two $x$-coordinates attained by the walk. Similarly, define the **height** of the walk to be the maximum difference between any two $y$-coordinates.\n","\n","Define the **diameter** of a 2-D random walk to be the maximum of the width and height of the walk. (This isn't the only way to define the diameter of a 2-D random walk, but it's simple. Can you think of other ways?)\n","\n","What is the average diameter of a 2-D random walk after 100 steps? How does the diameter depend on the number of steps?"]},{"cell_type":"code","metadata":{"id":"-lqXMM3oTPUq"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0so_Apv7TPcI"},"source":["## 4. Distinct Points Visited\n","\n","How many distinct points (with integer coordinates only) does the random walk visit in its first 100 steps?\n","\n","How does the avereage number of distinct points visited depend on the number of steps?"]},{"cell_type":"code","metadata":{"id":"mtIZDDBiUMCG"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YnEEzVzUYYCG"},"source":["## 5. Now investigate your own questions!"]}]}