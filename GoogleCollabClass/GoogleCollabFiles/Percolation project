{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Percolation project","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNSbxf08aKie7Nya83nIkK0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"V5sN_LpwZZv7"},"source":["To model percolation, I must first assemble modules that model percolation. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":623},"id":"StFMSuPUZX0p","executionInfo":{"status":"error","timestamp":1619733078694,"user_tz":300,"elapsed":623,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"dcb179fc-4276-4279-8b23-d910f80ba74f"},"source":[" import numpy as np\n"," import math\n"," import random\n"," import matplotlib.pyplot as plt\n"," from matplotlib.colors import ListedColormap\n","\n","n = 10\n","p = 0.8\n","(np.random.rand(n,n) < p).astype(int)\n","grid = (np.random.rand(n,n) < p)*1\n","mycolormap = ListedColormap([\"grey\",\"blue\"])\n","plt.imshow(grid, cmap=mycolormap)\n","\n","class percolationException(Exception): pass#simplest type of exception in python.\n","#pass means I don't want to put anything there. empty exception.\n","\n","def query(row, col, grid, visited):\n","  #print(\"Visiting square \", row, \",\", col)\n","  visited[row,col] = 1#mark row, col as visited.\n","\n","  #is row equal to teh bottom row? if so, output \"path foudn\"\n","  (numRows, numCols) = np.shape(grid)#get size of grid\n","  if row == (numRows - 1):\n","    #print(\"percolation found\")\n","    raise percolationException#causing an error in python so python will quit the recursive function calls.\n","  else:\n","  #if square below is open and unvisited, then is there  a a path from that square?\n","    if grid[row+1,col] == 1 and visited[row+1,col] == 0:#1 is open, 0 is closed.\n","      query(row+1, col, grid, visited)\n","\n","  #is there a square to left, is it open, and is it not visited?\n","  if col > 0 and grid[row, col-1] == 1 and visited[row,col-1] == 0:\n","    query(row, col-1, grid, visited)\n","\n","  #right: is new column index less than 10 (col+1 < numCols. at most 9)\n","  if col+1 < numCols and grid[row, col+1] == 1 and visited[row, col+1] == 0:\n","    query(row, col+1, grid, visited)\n","\n","  #above\n","  if row > 0 and grid[row-1, col] == 1 and visited[row-1, col] == 0:\n","    query(row-1, col, grid, visited)\n","\n","visited = np.zeros( (n,n) )#zero matrix. 0 becomes a 1 to record that I visited it.\n","query(0,0,grid, visited)#0, 0 is open square. modify based on grid.\n","np.shape(grid)\n","grid\n","\n","query(0,0,grid, visited)#0, 0 is open square. modify based on grid.\n","#THe query keeps calling itself. how do we stop this? \n","#it's a nested sequence of function calls. "],"execution_count":6,"outputs":[{"output_type":"error","ename":"percolationException","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mpercolationException\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0mvisited\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;31m#zero matrix. 0 becomes a 1 to record that I visited it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#0, 0 is open square. modify based on grid.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     38\u001b[0m  \u001b[0;31m#right: is new column index less than 10 (col+1 < numCols. at most 9)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m  \u001b[0;32mif\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnumCols\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m    \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m  \u001b[0;31m#above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     38\u001b[0m  \u001b[0;31m#right: is new column index less than 10 (col+1 < numCols. at most 9)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m  \u001b[0;32mif\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnumCols\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m    \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m  \u001b[0;31m#above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     30\u001b[0m  \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m  \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-9894e8ff2f34>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     25\u001b[0m  \u001b[0;32mif\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnumRows\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m    \u001b[0;31m#print(\"percolation found\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m    \u001b[0;32mraise\u001b[0m \u001b[0mpercolationException\u001b[0m\u001b[0;31m#causing an error in python so python will quit the recursive function calls.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m    \u001b[0;31m#FOR SOME REASON IT IS NOT WORKING PROPERLY NOW.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m  \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mpercolationException\u001b[0m: "]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Xl_lOXDlfl5F"},"source":["Above, the code runs as expected. When a percolation is found, the query is cut short with an error. \n","Also plotted is an example of percolation. The blue represents open, and the gray is closed. \n","Next, a module that takes input as n, the grid size, and p, the chance of an open square, is modified. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-E6rD1c4kyun","executionInfo":{"status":"ok","timestamp":1619734243083,"user_tz":300,"elapsed":428,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"b5592923-2146-4d8c-f116-e2a8a61e0c67"},"source":["def findPercolation(n, p):\n","  grid = (np.random.rand(n,n) < p)*1\n","  #create an empty visited matrix\n","  (numRows, numCols) = np.shape(grid)\n","  visited = np.zeros( (numRows, numCols) )\n","\n","  #then look for a percolation path starting at each open square in the top row.\n","  try: #put code in here tha tmight raise an exception. If it does, go to except. Else, go to else.\n","    #start teh query in oevery open cell in the top row:\n","    for c in range(numCols):#consider all squares in the top row.\n","      if grid[0,c] == 1:\n","        query(0, c, grid, visited)\n","\n","  except percolationException:\n","    #print(\"percolationException called\")\n","    return 1#driver function returns True or False.\n","  else:\n","    #print(\"percolation not found\")\n","    return 0\n","\n","findPercolation(10, 0.9)"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"Lt4p36rBgCni"},"source":["Above, 1 is returned if a percolation is found and 0 if not.\n","Below is an averaged list of percolation output. It averages 0 and 1 for various values of p. the input is N and I create multiple lists for each slope to graph them."]},{"cell_type":"code","metadata":{"id":"5O0TfcnMnAjK","executionInfo":{"status":"ok","timestamp":1619747014513,"user_tz":300,"elapsed":5742,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["#xvals is p. \n","#yvals is multiple values of n.\n","n = 10\n","#various values of p\n","#first, I can find the mean probability of percolation for one value of p\n","grid = (np.random.rand(n,n) < p)*1\n","def meanPercolation(n, p):\n","  length = [ findPercolation(n, p) for i in range(1000) ]\n","  mean = sum(length)/len(length)\n","  return mean\n","meanPercolation(10, 0.5)\n","\n","#create a small module that returns a list of percolation probabilities for various values of p for one set n:\n","def listPercs(n):\n","  p = 0\n","  meanpercs = []\n","  while p < 1:\n","    meanpercs.append(meanPercolation(n, p))\n","    p = p + 0.01\n","  return meanpercs\n","#meanpercs = [ meanPercolation(n, p) for p in range (0,1,0.1)]\n","#meanpercs\n","\n","varyPnis10 = listPercs(10)#insert n value"],"execution_count":106,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ts3b_roXuPJq","executionInfo":{"status":"ok","timestamp":1619747027378,"user_tz":300,"elapsed":11597,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["varyPnis20 = listPercs(20)"],"execution_count":107,"outputs":[]},{"cell_type":"code","metadata":{"id":"lAbdfMQTuO_P","executionInfo":{"status":"ok","timestamp":1619747046160,"user_tz":300,"elapsed":27096,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["varyPnis30 = listPercs(30)"],"execution_count":108,"outputs":[]},{"cell_type":"code","metadata":{"id":"QNsAqvwhuO1E","executionInfo":{"status":"ok","timestamp":1619747073860,"user_tz":300,"elapsed":51915,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["varyPnis40 = listPercs(40)"],"execution_count":109,"outputs":[]},{"cell_type":"code","metadata":{"id":"h2qx01S-uOMm","executionInfo":{"status":"ok","timestamp":1619747111589,"user_tz":300,"elapsed":86716,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["varyPnis50 = listPercs(50)"],"execution_count":110,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fTBMbmwTgV92"},"source":["Plot it:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"287mgLU-qwpc","executionInfo":{"status":"ok","timestamp":1619747111610,"user_tz":300,"elapsed":85428,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"0e310a10-afd8-4d4d-a698-f95ac59b9ade"},"source":["#Alright. Create x-values and plot it\n","nvals = []\n","p = 0\n","while p < 1:\n","  nvals.append(p)\n","  p = p + 0.01\n","nvals\n","plt.plot(nvals, varyPnis10, 'k-')\n","plt.plot(nvals, varyPnis20, 'b-')\n","plt.plot(nvals, varyPnis30, 'c-')\n","plt.plot(nvals, varyPnis40, 'y-')\n","plt.plot(nvals, varyPnis50, 'r-')\n","plt.ylabel(\"probability of percolation\")\n","plt.xlabel(\"probability of open squares\")"],"execution_count":111,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'probability of open squares')"]},"metadata":{"tags":[]},"execution_count":111},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"yZKHu4KvgZms"},"source":["Plot the graph above again and zoom in on where the action happens:\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"BzTcARZLuslE","executionInfo":{"status":"ok","timestamp":1619747111872,"user_tz":300,"elapsed":81930,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"547988b2-7627-40f7-b338-f3e4953d6c63"},"source":["#plot again and zoom in on where the action happens \n","plt.plot(nvals, varyPnis10, 'k-')\n","plt.plot(nvals, varyPnis20, 'b-')\n","plt.plot(nvals, varyPnis30, 'c-')\n","plt.plot(nvals, varyPnis40, 'y-')\n","plt.plot(nvals, varyPnis50, 'r-')\n","plt.xlim([0.4, 0.75])\n","plt.ylabel(\"probability of percolation\")\n","plt.xlabel(\"probability of open squares p\")"],"execution_count":112,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'probability of open squares p')"]},"metadata":{"tags":[]},"execution_count":112},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"zRs0Dyb4dCud"},"source":["\n","The probability of percolation is higher for smaller grids when p is less than around 0.6, but the probability is still low. \n","At around 0.6, the grid size does not matter and the probabiltiy of percolation is always 0.5.\n","Then, past p = 0.6, the probability of percolation becomes quite high, and larger grids have a higher chance of percolation for given values of p in this range.\n","At extreme ends, when p is small, percolation is always 0. When p is large, percolation is always 1. \n","Future research might be to explore percolation with difference movements or in a 3d space. \n","Limitations are processing capacity limiting time. "]},{"cell_type":"markdown","metadata":{"id":"TEDBaP18xqLP"},"source":["#2. How does the probability of percolation depend on n when p is fixed? \n","Let p = 0.5 and find the probability of percolation for various values of n. Make a plot showing how the probability of percolation depends on n when p = 0.5. Then repeat this for p = 0.55, p = 0.6, p = 0.65, and p = 0.7. You may try additional values of p if you like. What do you observe?"]},{"cell_type":"markdown","metadata":{"id":"g6qAaSXDgjdk"},"source":["First, I add the suggested code to increase the recursion limit. Then, I swap \"n\" and \"p\" from my code above to get lists for each line based on different values of p. \n","I plot it. "]},{"cell_type":"code","metadata":{"id":"NJ6iBUiNdGQt","executionInfo":{"status":"ok","timestamp":1619747172616,"user_tz":300,"elapsed":372,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["import sys\n","sys.setrecursionlimit(4000)"],"execution_count":113,"outputs":[]},{"cell_type":"code","metadata":{"id":"V6YJ3sCXwCCe","executionInfo":{"status":"ok","timestamp":1619747543799,"user_tz":300,"elapsed":48844,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["#Copy code from #1 and swap n and p.\n","#p = 0.5\n","def meanPercolation(n, p):\n","  length = [ findPercolation(n, p) for i in range(1000) ]\n","  mean = sum(length)/len(length)\n","  return mean\n","meanPercolation(10, 0.5)\n","\n","def listPercs(p):\n","  n = 0\n","  meanpercs = []\n","  while n < 100:\n","    meanpercs.append(meanPercolation(n, p))\n","    n = n + 10\n","  return meanpercs\n","holdNvaryP5 = listPercs(0.5)\n","holdNvaryP55 = listPercs(0.55)\n","holdNvaryP6 = listPercs(0.6)\n","holdNvaryP65 = listPercs(0.65)\n","holdNvaryP7 = listPercs(0.7)"],"execution_count":114,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7rflV2jugxWy"},"source":["Here is an example of a list where P is 0.6. The list has different values of n for this one value of p."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"THHyF6SfT6Ff","executionInfo":{"status":"ok","timestamp":1619747548274,"user_tz":300,"elapsed":346,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"2e3c2907-1ac2-415a-edcd-f53d14d6cc7c"},"source":["holdNvaryP6"],"execution_count":115,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.0, 0.591, 0.58, 0.578, 0.614, 0.593, 0.61, 0.647, 0.651, 0.678]"]},"metadata":{"tags":[]},"execution_count":115}]},{"cell_type":"markdown","metadata":{"id":"JTkiSnmRhAif"},"source":["x-values for plot: (values of n)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Ue8BPyHXm-X","executionInfo":{"status":"ok","timestamp":1619747550454,"user_tz":300,"elapsed":358,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"09ea00af-9eaf-44d5-fee3-64c0a01e1c0f"},"source":["nvals = []#x-values for plot\n","n = 0\n","while n < 100:\n","  nvals.append(n)\n","  n = n + 10\n","nvals"],"execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]"]},"metadata":{"tags":[]},"execution_count":116}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"g-DopigYWku4","executionInfo":{"status":"ok","timestamp":1619747553418,"user_tz":300,"elapsed":652,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"bfa5ea20-ee7f-45c0-8e7b-59708a96e6be"},"source":["plt.plot(nvals, holdNvaryP5, 'k-')\n","plt.plot(nvals, holdNvaryP55, 'b-')\n","plt.plot(nvals, holdNvaryP6, 'c-')\n","plt.plot(nvals, holdNvaryP65, 'y-')\n","plt.plot(nvals, holdNvaryP7, 'r-')\n","plt.ylabel(\"probability of percolation\")\n","plt.xlabel(\"size of grid\")"],"execution_count":117,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'size of grid')"]},"metadata":{"tags":[]},"execution_count":117},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"g4Zfeq8jZcqk"},"source":["After modifying my code from #1 by swapping \"n\" and \"p\", I plotted lines with different values of p. The chances of percolation seem to plateau at around a grid size of 60. For p = 7 and p = 0.65, the chances of percolation become 1 at around n = 70.  But, for p = 0.5 and p = 0.55, the chances of percolation drop to 0 at about n = 70. Meanwhile, p = 0.6 balances in the middle with around a 0.6 chance of percolation.\n","For future research, I would like to plot more values. However, there is a recursion limit.\n","I would also like to see at what exact value the probability plateaus and confirm the value the mathematician in class found. Exploring whether the slope for each line can be graphed with a matching function would be another idea for exploring the very sharp change at n = 10. Also, it would be useful for exploring the causes behind different shapes of the graphs.\n","Limitations for this problem was a limit on recursion that had to be changed manually. Besides that, the runtime is long."]},{"cell_type":"code","metadata":{"id":"5YDx8EMkXftQ"},"source":[""],"execution_count":null,"outputs":[]}]}