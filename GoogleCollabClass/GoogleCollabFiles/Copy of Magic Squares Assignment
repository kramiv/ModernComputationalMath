{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Magic Squares Assignment","provenance":[{"file_id":"1yFH3i4R4iC5oBlflvnjaWJo0ONF5neNL","timestamp":1620062707896}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"D_Cnx63kGRvv"},"source":["###to see plots, \"runtime --> run all\". The questions have anwers in text boxes otherwise."]},{"cell_type":"markdown","metadata":{"id":"k5kGUgdGdNnU"},"source":["To solve magic square assignment:\n","1. states: assignment of 1,2,...n^2 into the n^2 boxes. there are 9! arrangements of numbers in the boxes.\n","in general: (n^2)! states.\n","2. transitions/moves: pick two entries at random, switch the two numbers.\n","3. function to minimize on the states: \n","  one idea is to compute row/col/diag sums and multiply them.\n","  another: compute row/col/diag sums, count how many equal target.\n","  compute differences between row/col/diag sums with the target\n"]},{"cell_type":"markdown","metadata":{"id":"es6BH_2diFZa"},"source":["# Magic Squares Assignment\n","\n","Math 242 Modern Computational Mathematics\n","\n","A $n \\times n$ **magic square** is an arrangement of the numbers $1, 2, \\ldots, n^2$ in a $n \\times n$ grid in such a way that all of the rows, columns, and diagonals have the same sum. \n","Here is an example of a $3 \\times 3$ magic square:\n","\n","$$\\begin{array}{|c|c|c|}\n"," \\hline\n"," 4 & 9 & 2\\\\\n"," \\hline\n"," 3 & 5 & 7\\\\\n"," \\hline\n"," 8 & 1 & 6\\\\\n"," \\hline\n"," \\end{array} $$\n","\n","Specifically, there are $n$ rows, $n$ columns, and $2$ diagonals, each of which adds up to $\\frac{1}{2}n(n^2+1)$. \n","\n","\n","## Your Task\n","\n","Use simulated annealing to find magic squares for at $n=3$ and $n=4$. (You may find larger magic squares if you like!) To do this, you must first convert the problem of finding a magic square to the problem of minimizing a function $f : \\Omega \\to \\mathbb{R}$.\n","\n","For each value of $n$, answer the following questions:\n","\n","1. What values of `k` and `decFac` do you find to work best?\n","2. Using your preferred choice of `k` and `decFac`, what is the average number of steps required to find a magic square?\n","3. How does the value of your function $f$ change during the simulated annealing process? Make a plot that shows this clearly.\n","\n","This is an *assignment*, not a *project*. The important thing is to write code that works and answer the three questions above for $n=3$ and $n=4$."]},{"cell_type":"markdown","metadata":{"id":"sCKNeW9gRtf_"},"source":["sum of one row is (1 + 2 + 3 + ... + n^2) / n\n","\n","since there are n row-sums, each of them must be (1/n)*(1/2)*n^2*(n^2 + 1)  =  (1/2)n*(n^2 + 1)\n","\n","convert to an optimization problem:\n","what are the states?\n","what function do we minimize?\n","and how do we move from one state to another?\n","\n","\n","\n","\n","https://colab.research.google.com/drive/1Xf8Mgm78HULnSO6UR_HnDU5Ki6nPANGZ#scrollTo=-9p1xrbiZqQ0\n","\n","what function needs to be minimized?\n","a function that is minimized when the state is a magic square.\n","\n"]},{"cell_type":"code","metadata":{"id":"iPe76dsMkNdY"},"source":["import math\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","sum = (1/2)*3*(3**2 + 1)#sum per row\n","P = int(sum)# sum of the numbers\n","p = 3 # number of numbers"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4bq1HcSBjqlN"},"source":["def sums(input):#not a matrix\n","  matrix = np.reshape(input, (3,3))\n","  #setup:\n","  row0 = matrix[0,:,]\n","  row1 = matrix[1,:,]\n","  row2 = matrix[2,:,]\n","  col0 = matrix[:,0]\n","  col1 = matrix[:,1]\n","  col2 = matrix[:,2]\n","  #row sums:\n","  sumrow0 = row0[0] + row0[1] + row0[2]\n","  sumrow1 = row1[0] + row1[1] + row1[2]\n","  sumrow2 = row2[0] + row2[1] + row2[2]\n","  #diagonal sums:\n","  sumdiagright = matrix[0,0] + matrix[1,1] + matrix[2,2]#colon gives a slice\n","  sumdiagleft = matrix[0,2] + matrix[1,1] + matrix[2,0]\n","  #column sums:\n","  sumcol0 = col0[0] + col0[1] + col0[2]\n","  sumcol1 = col1[0] + col1[1] + col1[2]\n","  sumcol2 = col2[0] + col2[1] + col2[2]\n","  state = [sumrow0, sumrow1, sumrow2, sumdiagright, sumdiagleft, sumcol0, sumcol1, sumcol2]\n","  return state\n","#we don't want the product. we want distance from magic square.\n","\n","def proposeMove2(currState):\n","  currState = np.reshape(currState, (3,3))\n","  propState = currState.copy()  # make a copy of currState so that we don't modify currState\n","  #print(currState)\n","  i,j,n,k = random.choices(range(3),k=4)   # select two distinct indexes from 0, 1, 2, ... m-1\n","\n","  # increment propState[i] and decrement propState[j]\n","  temp = propState[i,j]\n","  propState[i,j] = propState[n,k]\n","  propState[n,k] = temp\n","  propState = np.reshape(propState, 9)\n","  return propState\n","#matrix1 = proposeMove2(matrix1) works\n","#proposeMove2(matrix1) works\n","\n","# function to make a move, deciding whether or not to accept the proposed move\n","def doMove2(currState, k):\n","  # propose a move\n","  propState = proposeMove2(currState)\n","  # compute the function value difference\n","  df = f2(propState) - f2(currState)#minimizing the max difference is best.\n","  # if df < 0, then make the move\n","  if df < 0:\n","    return propState\n","  # if df > 0, then make the move with probability rho\n","  rho = math.exp(-df/k)\n","  rand = random.random()   # random number between 0 and 1\n","  if rand < rho: # then move\n","    return propState\n","  # else: don't move\n","  return currState\n","\n","def f2(state):#okay this is not working for some reason....\n","  #return (-1)*(math.log( np.prod(state) + 1))#math.log gives natural log unless some otehr base is specified.\n","  #need to find distance from magic square.\n","  #need the 8 sums and take product + subtract from target.\n","  state = sums(state)#array of 15s\n","  #state = np.prod(state)\n","  ideal = np.array([15, 15, 15, 15, 15, 15, 15, 15])\n","  difference = np.abs((state - ideal))#subtract two values\n","  return np.max(difference)#####"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i4IfO8_ViCtU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620693507355,"user_tz":300,"elapsed":615,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"2d1f1b63-363c-40ff-f299-becf326ca1a1"},"source":["lengths = []\n","ffvals = []\n","def everything1():\n","  # simulate the random walk\n","  numSteps = 200\n","  k = 1\n","  decFac = 0.99  # decrease factor\n","  #randomly generate numbers 1-9. and shuffle them. This creates the initial state.\n","  #should later adjust for flexible square sizes.\n","  nums = random.sample(range(1,10), k = 9)#k is number of things to sample.\n","  #nums = list(range())\n","  #print(nums)\n","  #random.shuffle(nums)\n","  state = nums#\n","  #rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","  #state = [rand.count(i) for i in range(m)]  # a random starting state\n","  ######sfvals = [f2(state)]#keep trac kof the values of f\n","  #print(\"starting state:\", state)\n","  #print(\"starting f2(state):\", f2(state))\n","  #print(\"starting product:\", np.prod(state))\n","  length = 0\n","  while f2(state) > 0:\n","    state = doMove2(state,k)\n","    ffvals.append( f2(state) )\n","    #print(f2(state))\n","    # decrease k a little bit\n","    k = k*decFac\n","    length = length+1\n","  #print(\"length \", length)\n","  #print(\"ending state:\", state)\n"," # print(\"ending f2(state):\", f2(state))\n","  #print(\"ending product:\", np.prod(state))\n","  #print(\"k:\", k)\n","  lengths.append(length)\n","  return 0\n","\n","#for i in range(100):\n","#  everything1()\n","everything1()\n","#plt.plot(fvals)\n","#plt.xlabel(\"step number\")\n","#plt.ylabel(\"f2(state)\")\n","#state = np.reshape(state, (3,3))\n","#print(state)\n","#print(\"lengths lengths lenghts lenghts\", lengths)\n","mean = np.sum(lengths)/100\n","mean#274.56"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.86"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"szqUmO-ilOU8","executionInfo":{"status":"ok","timestamp":1620693507832,"user_tz":300,"elapsed":1062,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"354ab2e4-5dff-4753-a89e-d655612e2abc"},"source":["#I would modify the code above to run everything1() only once.\n","plt.plot(ffvals)\n","plt.xlabel(\"step number\")\n","plt.ylabel(\"f2(state)\")\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'f2(state)')"]},"metadata":{"tags":[]},"execution_count":4},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Qd6Cl-cUd_0U"},"source":["1. What values of k and decFac do you find to work best?\n","  numSteps = 200\n","\n","  k = 1\n","  decFac = 0.95\n","  A magic square is achieved at about 150 steps.\n","\n","  k = 10\n","  decFac = 0.95\n","  magic square achieved at about 137 steps.\n","\n","  k = 1\n","  decFac = 0.9\n","  magic square achieved at about 190 steps.\n","\n","  k = 1\n","  decFac = 0.99\n","  120 steps\n","\n","  k=1, decFac = 0.99. This appears to work best because if k gets bigger then it takes longer. A larger decFac finds a square faster than a larger k with a smaller decFac.\n","\n","2. Using your preferred choice of k and decFac, what is the average number of steps required to find a magic square?\n","\n","  for k = 1, decFac = 0.99, the mean for 100 walks is 279.44\n","\n","3. How does the value of your function  f  change during the simulated annealing process? Make a plot that shows this clearly.\n","\n","it jumps around up and down as it gradually trends downwards. stops at about 130 steps.\n","\n"]},{"cell_type":"code","metadata":{"id":"E9CVDNOhhUjq"},"source":["def sums(input):#not a matrix\n","  matrix = np.reshape(input, (4,4))\n","  #setup:\n","  row0 = matrix[0,:,]\n","  row1 = matrix[1,:,]\n","  row2 = matrix[2,:,]\n","  row3 = matrix[3,:,]###\n","  col0 = matrix[:,0]\n","  col1 = matrix[:,1]\n","  col2 = matrix[:,2]\n","  col3 = matrix[:,3]\n","  #row sums:\n","  sumrow0 = row0[0] + row0[1] + row0[2] + row0[3]\n","  sumrow1 = row1[0] + row1[1] + row1[2] + row1[3]\n","  sumrow2 = row2[0] + row2[1] + row2[2] + row2[3]\n","  sumrow3 = row3[0] + row3[1] + row3[2] + row3[3]\n","  #diagonal sums:\n","  sumdiagright = matrix[0,0] + matrix[1,1] + matrix[2,2] + matrix[3,3]#colon gives a slice\n","  sumdiagleft = matrix[0,3] + matrix[1,2] + matrix[2,1] + matrix[3,0]\n","  #column sums:\n","  sumcol0 = col0[0] + col0[1] + col0[2] + col0[3]\n","  sumcol1 = col1[0] + col1[1] + col1[2] + col1[3]\n","  sumcol2 = col2[0] + col2[1] + col2[2] + col2[3]\n","  sumcol3 = col3[0] + col3[1] + col3[2] + col3[3]\n","  state = [sumrow0, sumrow1, sumrow2, sumrow3, sumdiagright, sumdiagleft, sumcol0, sumcol1, sumcol2, sumcol3]\n","  return state\n","#we don't want the product. we want distance from magic square.\n","\n","def proposeMove2(currState):\n","  currState = np.reshape(currState, (4,4))\n","  propState = currState.copy()  # make a copy of currState so that we don't modify currState\n","  #print(currState)\n","  i,j,n,k = random.choices(range(4),k=4)   # select two distinct indexes from 0, 1, 2, ... m-1\n","\n","  # increment propState[i] and decrement propState[j]\n","  temp = propState[i,j]\n","  propState[i,j] = propState[n,k]\n","  propState[n,k] = temp\n","  propState = np.reshape(propState, 16)\n","  return propState\n","#matrix1 = proposeMove2(matrix1) works\n","#proposeMove2(matrix1) works\n","\n","# function to make a move, deciding whether or not to accept the proposed move\n","def doMove2(currState, k):\n","  # propose a move\n","  propState = proposeMove2(currState)\n","  # compute the function value difference\n","  df = f2(propState) - f2(currState)#minimizing the max difference is best.\n","  # if df < 0, then make the move\n","  if df < 0:\n","    return propState\n","  # if df > 0, then make the move with probability rho\n","  rho = math.exp(-df/k)\n","  rand = random.random()   # random number between 0 and 1\n","  if rand < rho: # then move\n","    return propState\n","  # else: don't move\n","  return currState\n","\n","def f2(state):#okay this is not working for some reason....\n","  #return (-1)*(math.log( np.prod(state) + 1))#math.log gives natural log unless some otehr base is specified.\n","  #need to find distance from magic square.\n","  #need the 8 sums and take product + subtract from target.\n","  sum = (1/2)*4*(4**2 + 1)#sum per row\n","  state = sums(state)#array of 15s\n","  #state = np.prod(state)\n","  ideal = np.array([sum, sum, sum, sum, sum, sum, sum, sum, sum, sum])\n","  difference = np.abs((state - ideal))#subtract two values\n","  return np.max(difference)#####"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZsXUorZsCw99","executionInfo":{"status":"ok","timestamp":1620693521725,"user_tz":300,"elapsed":14929,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"a4e63085-a9c8-44d6-a682-04716beb799e"},"source":["lengths = []\n","ffvals = []\n","def everything2():\n","  numSteps = 200\n","  k = 1\n","  decFac = 0.9  # decrease factor\n","  nums = random.sample(range(1,17), k = 16)#\n","  state = nums\n","  ffvals = [f2(state)]#keep trac kof the values of f\n","  length = 0\n","  while f2(state) > 0:\n","    # make a move\n","    state = doMove2(state,k)\n","    ffvals.append( f2(state) )\n","    # decrease k a little bit\n","    k = k*decFac\n","    length = length + 1\n","  #print(\"length \", length)\n","  lengths.append(length)\n","  return ffvals\n","\n","\n","for i in range(10):\n","  everything2()\n","\n","mean = np.sum(lengths)/100\n","mean#324.45"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:54: RuntimeWarning: overflow encountered in double_scalars\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["944.12"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"V8KUurpq2jzp"},"source":["1. What values of k and decFac do you find to work best?\n","  numSteps = 200\n","\n","  k = 1\n","  decFac = 0.95\n","  A magic square is achieved at about 170 steps\n","\n","  k = 10\n","  decFac = 0.95\n","  magic square achieved at about 120 steps\n","\n","  k = 1\n","  decFac = 0.9\n","  magic square achieved at about 75 steps\n","\n","  k = 1\n","  decFac = 0.99\n","  150 steps\n","\n","  k=1, decFac = 0.9 appear to work best for this one. (n=4)\n","\n","2. Using your preferred choice of k and decFac, what is the average number of steps required to find a magic square?\n","\n","  for k = 1, decFac = 0.9, the mean for 10 walks is 324.45\n","\n","3. How does the value of your function  f  change during the simulated annealing process? Make a plot that shows this clearly.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"VJbupEzEF-yf"},"source":["for #3: \n","it appears that the walk length tends to be much longer. The general shape of f(state) is an exponential drop. It does not appear to bounce around in valuea s much, but that may be because the plot is not very large/detailed.\n","I am not quite sure why the average numsteps is so much shorter than all the walks in the plot below..."]},{"cell_type":"code","metadata":{"id":"0BCm4b7X2KVL","colab":{"base_uri":"https://localhost:8080/","height":296},"executionInfo":{"status":"ok","timestamp":1620693522003,"user_tz":300,"elapsed":15196,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"abe0b5fb-5288-4d78-d010-53a203c148bf"},"source":["ffvals = []\n","everything2()\n","\n","plt.plot(ffvals)\n","plt.xlabel(\"step number\")\n","plt.ylabel(\"f2(state)\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'f2(state)')"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"K2IO0eztPiJz"},"source":[""],"execution_count":null,"outputs":[]}]}