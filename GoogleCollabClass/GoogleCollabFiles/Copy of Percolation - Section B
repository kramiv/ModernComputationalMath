{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Percolation - Section B","provenance":[{"file_id":"1x5mRVPM5tmUMbBpwE3OB5TMs84ZQjhuW","timestamp":1619196795554},{"file_id":"1C1NG6Zb_WxtvpUZhc_oVHwej8Ko2yiE-","timestamp":1618856713137}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6MlG9b0_v3C4"},"source":["# Percolation\n","\n","Consider a $n \\times n$ grid of squares. Each square is either \"open\" with probability $p$ or \"closed\" with probability $1-p$. Imagine that water is poured on the top of the grid and flows through the open squares. What is the probability that the water will be able to flow from the top of the grid to the bottom through a path of open squares? "]},{"cell_type":"markdown","metadata":{"id":"l8vLRra9wuhm"},"source":["Import some necessary modules:"]},{"cell_type":"code","metadata":{"id":"vAu9ph83vwiu"},"source":[" import numpy as np\n"," import math\n"," import random\n"," import matplotlib.pyplot as plt\n"," from matplotlib.colors import ListedColormap"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MHFcAHl9w2Z3"},"source":["Define variables:\n","\n","* `n`: the number of rows and columns in the grid\n","* `p`: probability that a square is \"open\""]},{"cell_type":"code","metadata":{"id":"DGu3cliWxIxe"},"source":["n = 10\n","p = 0.8"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"35ha-LIAxdIL"},"source":["Define a data structure for the $n \\times n$ grid. You will need to decide how to represent \"open\" and \"closed\" squares in memory. Fill your grid so that each square is \"open\" with probability $p$."]},{"cell_type":"code","metadata":{"id":"wjZz9Upux1iX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619457963652,"user_tz":300,"elapsed":416,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"8e1b73f9-96e7-4819-c2e7-e433eac8103d"},"source":["(np.random.rand(n,n) < p).astype(int)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 0, 1, 1, 0, 1, 1, 1, 1, 1],\n","       [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],\n","       [1, 1, 1, 0, 1, 1, 1, 1, 1, 1],\n","       [1, 1, 1, 1, 1, 1, 0, 1, 0, 1],\n","       [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],\n","       [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],\n","       [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],\n","       [1, 1, 0, 0, 1, 1, 0, 1, 1, 1],\n","       [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],\n","       [1, 0, 0, 1, 1, 1, 1, 0, 1, 0]])"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IXOmmlvfZ7ug","executionInfo":{"status":"ok","timestamp":1619457965997,"user_tz":300,"elapsed":772,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"0fc00144-8bd2-4434-9497-32a5296352eb"},"source":["grid = (np.random.rand(n,n) < p)*1\n","grid\n","grid[1,1]#row, col"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"m1embv62aL-o","executionInfo":{"status":"ok","timestamp":1619457969001,"user_tz":300,"elapsed":1233,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"7600d42c-1bed-40ee-bdcd-264cde5eb6f1"},"source":["mycolormap = ListedColormap([\"grey\",\"blue\"])\n","plt.imshow(grid, cmap=mycolormap)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f17ff633bd0>"]},"metadata":{"tags":[]},"execution_count":20},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hM2lGTTjx1pF"},"source":["Now we need to determine whether there exists a path of open cells from the top to the bottom of the grid.\n","\n","_How should we do this? What sort of algorithm would work best? Think about this and discuss with your classmates._"]},{"cell_type":"code","metadata":{"id":"qNnj4IDux3IY"},"source":["#algorithm is a \"depth-first search (dfs)\".\n","#there are different ways to search a maze or a structure. go as deep as you can in one direction before you can turn back and look in \n","#another direction.\n","#another one: breadth-first search where you start as wide as you can before going down (but it's not as helpful for this problem)\n","#analogy: suppose tehre is an \"agent\" in each open square.\n","#when queried, each agent res respond as follows: if agent is on the bottom row, then say so.\n","#otherwise, query the agent below. Is there a path from the square below? If so, they we're done.\n","#each agent knows how to query its neighbors.\n","#otherwise, query theangent aobve, is there a path? if yes, then done.\n","#otherwise, answer \"no\" if no path at all.\n","#I can make a fucntion that does this. apply the fucntion and see if a percolation path exists.\n","#this calls teh fucntion for the neighborhoing cells - recursive function that calls itself.\n","\n","#Pseudocode: \n","#best is to make grid a local variable we send to the function, not a global variable.\n","#I need to knwo which squares have already been queried: \"visited\"\n","#def query(row, col, grid, visited)\n","#grid is matrix of 0,1. visited is another matrix that stores which suqares have been visiited. #row, col are indexes of square to query.\n","#first: mark row, col as visited\n","#is row equal to the bottom row? if so, output \"path foudn\"\n","#if square below is open and unvisited, then is there a path from that square?\n","#if square at left is open and univisited, then is there a path from that square?\n","#if square at right is open adn unvisited, then is there a path from that square?\n","#if the square above is open and unvisited, then is there a path from that square?\n","#if ______: \n","#   query(row+1, col, grid, visited)  \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bjADw1iXL819","executionInfo":{"status":"ok","timestamp":1619457975201,"user_tz":300,"elapsed":888,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"de15136d-e15e-4f1f-f0b4-f008522b6389"},"source":[""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Visiting square  0 , 0\n","Visiting square  1 , 0\n","Visiting square  1 , 1\n","Visiting square  2 , 1\n","Visiting square  3 , 1\n","Visiting square  4 , 1\n","Visiting square  4 , 0\n","Visiting square  5 , 0\n","Visiting square  2 , 2\n","Visiting square  2 , 3\n","Visiting square  3 , 3\n","Visiting square  4 , 3\n","Visiting square  5 , 3\n","Visiting square  6 , 3\n","Visiting square  7 , 3\n","Visiting square  8 , 3\n","Visiting square  9 , 3\n","percolation found\n","Visiting square  9 , 4\n","percolation found\n","Visiting square  9 , 5\n","percolation found\n","Visiting square  9 , 6\n","percolation found\n","Visiting square  9 , 7\n","percolation found\n","Visiting square  9 , 8\n","percolation found\n","Visiting square  8 , 8\n","Visiting square  8 , 9\n","Visiting square  7 , 9\n","Visiting square  7 , 8\n","Visiting square  7 , 7\n","Visiting square  7 , 6\n","Visiting square  7 , 5\n","Visiting square  6 , 5\n","Visiting square  6 , 4\n","Visiting square  5 , 4\n","Visiting square  5 , 5\n","Visiting square  5 , 6\n","Visiting square  4 , 6\n","Visiting square  4 , 5\n","Visiting square  4 , 4\n","Visiting square  3 , 5\n","Visiting square  3 , 6\n","Visiting square  3 , 7\n","Visiting square  4 , 7\n","Visiting square  4 , 8\n","Visiting square  5 , 8\n","Visiting square  6 , 8\n","Visiting square  6 , 9\n","Visiting square  5 , 9\n","Visiting square  4 , 9\n","Visiting square  3 , 9\n","Visiting square  3 , 8\n","Visiting square  2 , 7\n","Visiting square  2 , 6\n","Visiting square  2 , 5\n","Visiting square  1 , 5\n","Visiting square  1 , 4\n","Visiting square  1 , 3\n","Visiting square  1 , 2\n","Visiting square  0 , 2\n","Visiting square  0 , 1\n","Visiting square  0 , 3\n","Visiting square  0 , 4\n","Visiting square  0 , 5\n","Visiting square  1 , 6\n","Visiting square  1 , 7\n","Visiting square  1 , 8\n","Visiting square  1 , 9\n","Visiting square  0 , 8\n","Visiting square  0 , 7\n","Visiting square  8 , 4\n","Visiting square  7 , 2\n","Visiting square  7 , 1\n","Visiting square  8 , 1\n","Visiting square  9 , 1\n","percolation found\n","Visiting square  9 , 0\n","percolation found\n","Visiting square  8 , 0\n","Visiting square  7 , 0\n","Visiting square  6 , 1\n","Visiting square  6 , 2\n","Visiting square  5 , 2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[1, 1, 1, 1, 1, 1, 0, 1, 1, 0],\n","       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n","       [0, 1, 1, 1, 0, 1, 1, 1, 0, 0],\n","       [0, 1, 0, 1, 0, 1, 1, 1, 1, 1],\n","       [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],\n","       [1, 0, 1, 1, 1, 1, 1, 0, 1, 1],\n","       [0, 1, 1, 1, 1, 1, 0, 0, 1, 1],\n","       [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],\n","       [1, 1, 0, 1, 1, 0, 0, 0, 1, 1],\n","       [1, 1, 0, 1, 1, 1, 1, 1, 1, 0]])"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"ifu52wkVz4hF","colab":{"base_uri":"https://localhost:8080/","height":681},"executionInfo":{"status":"error","timestamp":1619458157727,"user_tz":300,"elapsed":601,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"94ef3523-2c8c-429b-c23c-195775191c8f"},"source":["class percolationException(Exception): pass#simplest type of exception in python.\n","#pass means I don't want to put anything there. empty exception.\n","\n","\n","\n","def query(row, col, grid, visited):\n","  print(\"Visiting square \", row, \",\", col)\n","  visited[row,col] = 1#mark row, col as visited.\n","\n","  #is row equal to teh bottom row? if so, output \"path foudn\"\n","  (numRows, numCols) = np.shape(grid)#get size of grid\n","  if row == (numRows - 1):\n","    print(\"percolation found\")\n","    raise percolationException#causing an error in python so python will quit the recursive function calls.\n","    #FOR SOME REASON IT IS NOT WORKING PROPERLY NOW.\n","  else:\n","  #if square below is open and unvisited, then is there  a a path from that square?\n","    if grid[row+1,col] == 1 and visited[row+1,col] == 0:#1 is open, 0 is closed.\n","      query(row+1, col, grid, visited)\n","\n","  #is there a square to left, is it open, and is it not visited?\n","  if col > 0 and grid[row, col-1] == 1 and visited[row,col-1] == 0:\n","    query(row, col-1, grid, visited)\n","\n","  #right: is new column index less than 10 (col+1 < numCols. at most 9)\n","  if col+1 < numCols and grid[row, col+1] == 1 and visited[row, col+1] == 0:\n","    query(row, col+1, grid, visited)\n","\n","  #above\n","  if row > 0 and grid[row-1, col] == 1 and visited[row-1, col] == 0:\n","    query(row-1, col, grid, visited)\n","\n","\n","visited = np.zeros( (n,n) )#zero matrix. 0 becomes a 1 to record that I visited it.\n","query(0,0,grid, visited)#0, 0 is open square. modify based on grid.\n","np.shape(grid)\n","grid\n","\n","query(0,0,grid, visited)#0, 0 is open square. modify based on grid.\n","#THe query keeps calling itself. how do we stop this? \n","#it's a nested sequence of function calls. \n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Visiting square  0 , 0\n","Visiting square  1 , 0\n","Visiting square  1 , 1\n","Visiting square  2 , 1\n","Visiting square  3 , 1\n","Visiting square  4 , 1\n","Visiting square  4 , 0\n","Visiting square  5 , 0\n","Visiting square  2 , 2\n","Visiting square  2 , 3\n","Visiting square  3 , 3\n","Visiting square  4 , 3\n","Visiting square  5 , 3\n","Visiting square  6 , 3\n","Visiting square  7 , 3\n","Visiting square  8 , 3\n","Visiting square  9 , 3\n","percolation found\n"],"name":"stdout"},{"output_type":"error","ename":"percolationException","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mpercolationException\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0mvisited\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;31m#zero matrix. 0 becomes a 1 to record that I visited it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#0, 0 is open square. modify based on grid.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     25\u001b[0m   \u001b[0;31m#right: is new column index less than 10 (col+1 < numCols. at most 9)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnumCols\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m   \u001b[0;31m#above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     25\u001b[0m   \u001b[0;31m#right: is new column index less than 10 (col+1 < numCols. at most 9)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnumCols\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m   \u001b[0;31m#above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     25\u001b[0m   \u001b[0;31m#right: is new column index less than 10 (col+1 < numCols. at most 9)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnumCols\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m   \u001b[0;31m#above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;31m#if square below is open and unvisited, then is there  a a path from that square?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#1 is open, 0 is closed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m       \u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisited\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#is there a square to left, is it open, and is it not visited?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-725ff74f2332>\u001b[0m in \u001b[0;36mquery\u001b[0;34m(row, col, grid, visited)\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnumRows\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"percolation found\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mpercolationException\u001b[0m\u001b[0;31m#causing an error in python so python will quit the recursive function calls.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0;31m#FOR SOME REASON IT IS NOT WORKING PROPERLY NOW.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mpercolationException\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MCuGR0RAHw5j","executionInfo":{"status":"ok","timestamp":1619458632116,"user_tz":300,"elapsed":908,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"1b4ad74d-2006-45f1-f563-4d898fd7d555"},"source":["def findPercolation(grid):\n","  #create an empty visited matrix\n","  (numRows, numCols) = np.shape(grid)\n","  visited = np.zeros( (numRows, numCols) )\n","\n","  #then look for a percolation path starting at each open square in the top row.\n","  try: #put code in here tha tmight raise an exception. If it does, go to except. Else, go to else.\n","    #start teh query in oevery open cell in the top row:\n","    for c in range(numCols):#consider all squares in the top row.\n","      if grid[0,c] == 1:\n","        query(0, c, grid, visited)\n","\n","  except percolationException:\n","    print(\"percolationException called\")\n","    return True#driver function returns True or False.\n","  else:\n","    print(\"percolation not found\")\n","    return False\n","\n","findPercolation(grid)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Visiting square  0 , 0\n","Visiting square  1 , 0\n","Visiting square  1 , 1\n","Visiting square  2 , 1\n","Visiting square  3 , 1\n","Visiting square  4 , 1\n","Visiting square  4 , 0\n","Visiting square  5 , 0\n","Visiting square  2 , 2\n","Visiting square  2 , 3\n","Visiting square  3 , 3\n","Visiting square  4 , 3\n","Visiting square  5 , 3\n","Visiting square  6 , 3\n","Visiting square  7 , 3\n","Visiting square  8 , 3\n","Visiting square  9 , 3\n","percolation found\n","percolationException called\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"zTarL4rXQVFT"},"source":["#xvals is p. \n","#yvals is multiple values of n.\n","\n","n = 10\n","#various values of p\n","#first, I can find the mean probability of percolation for one value of p\n","grid = (np.random.rand(n,n) < p)*1\n","\n","\n"],"execution_count":null,"outputs":[]}]}