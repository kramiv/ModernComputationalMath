{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of 1D Random Walks","provenance":[{"file_id":"1wuRDFF1hoA9n_7KLTwwhUrBk0YUvzZi6","timestamp":1617988990096},{"file_id":"1uAFZp73VSVaZj8AfH7Q2unhoMTDM1F0k","timestamp":1554873053508}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"CnnGRDInjee5"},"source":["Simple symmetric 1-d random walk\n","simple: steps are 1 unit left or right.\n","symmetric: left and right steps are equally likely \n","1-D: it's on a number line\n","\n","\n","\n","# Notes: trouble investigation\n","estimated the average move length last time\n","how does the average move length depend on the roll-again value?\n","note: there is variability in ??\n","\n","\n","\n","1. will it eventually draw teh whole grid?\n","2. what is the distributino of points over many simulations?\n","3. average length of a walk\n","4. is it possible to fill the grid without going off the screen\n","5. what if we add diagonal movements\n","6. what if we don't allow it to backtrack\n","7. what if we don't allow it to exit? boundary rules\n","8. how far away from its starting place does it go?\n","9. how many square will it complete after n steps?\n","10. how often will it create a little square consecutively in 4 moves?\n","11. will it return to the starting point?\n"]},{"cell_type":"markdown","metadata":{"id":"Dw9MUwqX1V5Q"},"source":["# Random Walks\n","\n","Imagine you are standing at the origin of a number line. You flip a fair coin. If the coin lands heads, you move to +1. If the coin lands tails, you move to -1. You flip the coin again and again. Whenever it lands heads, you move 1 unit in the positive direction. Whenever it lands tails, you move 1 unit in the negative direction. Your path on the number line is called a **one-dimensional random walk**.\n","\n","What does a one-dimensional random walk look like? Let's create some with Python!"]},{"cell_type":"code","metadata":{"id":"PP94UEeLLaik"},"source":["# place your import statements here at the top of your notebook\n","import random\n","import math"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XXVWdTV3_LdX"},"source":["## 1. Building a Random Walk\n","\n","First, import the `random` module. Then use `random.choice([-1,1])` to simulate one step of the random walk. Try it out:"]},{"cell_type":"code","metadata":{"id":"GgpSxyD81UjA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618247314161,"user_tz":300,"elapsed":773,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"d16b41f8-20f7-401b-dff0-503db5d39bdb"},"source":["moves =[random.choice([-1,1]) for _ in range(30)]\n","print(*moves)#asterisk unpacks teh list"],"execution_count":null,"outputs":[{"output_type":"stream","text":["-1 -1 1 1 1 1 -1 1 1 1 1 -1 1 1 1 -1 1 -1 1 1 1 1 -1 1 -1 -1 1 -1 -1 1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sQx4cVd-2kEA"},"source":["Now simulate 100 steps of the random walk. Create a list called `locations` consisting of one hundred 0s. The first 0 is the starting location; the other 0s are placeholders for later locations. Compute each location after the first by choosing a +1 or -1 step at random and adding it to the previous location."]},{"cell_type":"code","metadata":{"id":"rOv-A09T13QE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618247390055,"user_tz":300,"elapsed":328,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"b9d8c39b-6e6a-4ded-b697-37a24d61eaf1"},"source":["locations = [0]*100 #creates a list of 100 0s\n","for i in range(1,100):\n","  moves = random.choice([-1,1])\n","  #add to previous location\n","  locations[i] = locations[i-1] + moves\n","print(*locations)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0 1 0 1 0 1 2 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 5 6 7 8 9 8 9 8 9 10 9 8 9 8 7 6 5 6 7 6 7 6 7 8 7 8 9 8 7 6 7 6 5 6 5 4 3 4 3 4 5 4 3 4 5 4 3 4 5 4 5 4 3 2 1 0 -1 0 1 0 1 2 3 2 3 2 3 4 3 4 5 6 7 8 7 6 5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XsIPhKoy_vxi"},"source":["Next, make a plot of the random walk. The horizontal axis will give the number of steps, and the vertical axis will give the location at each step."]},{"cell_type":"code","metadata":{"id":"0Ivf6z6s3IZR","colab":{"base_uri":"https://localhost:8080/","height":312},"executionInfo":{"status":"ok","timestamp":1618247325047,"user_tz":300,"elapsed":889,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"8f2488eb-705a-4f5e-8c19-385e5d9bf0f5"},"source":["\n","import matplotlib.pyplot as plt\n","plt.plot(locations)\n","plt.title(\"simple symmetric 1d random walk\")#x-axis is time\n","plt.xlabel(\"step number\")\n","plt.ylabel(\"location\")\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'location')"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"qvWT-JsO__Ag"},"source":["We will need to generate a lot of random walks. To make this easy, write a function that returns a random walk. Here is the specification for your function:\n","\n","**Function**: `randomWalk`\n","\n","**Input**: number of steps\n","\n","**Output**: a random walk, returned as a list of positions"]},{"cell_type":"code","metadata":{"id":"vvnJ0Q2R3JXi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618247545021,"user_tz":300,"elapsed":946,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"cd0c8569-f965-4411-a4f2-9b587d022b84"},"source":["def randomWalk(numSteps):#find diameter: take maximum - minimum diameter.\n","  locations = [0]*numSteps\n","  for i in range(1,numSteps):\n","    moves = random.choice([-1,1])\n","    locations[i] = locations[i-1] + moves\n","  #print(*locations)\n","  return locations\n","\n","randomWalk(20)\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, -1, 0, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 4, 3, 2, 1]"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"P-wyP0gx5yUY"},"source":["## 2. Diameter of a Random Walk\n","\n","The **diameter** of a random walk is the difference between the maximum and minimum locations in the walk. \n","\n","Write a function that computes the diameter of a random walk. The input to your function should be a random walk (i.e., a list), and your function should return the diameter of the walk.\n","\n","Note that Python has built-in functions `min` and `max` that return the minimum and maximum values in a list."]},{"cell_type":"code","metadata":{"id":"DUSMy2RI6upQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618247622947,"user_tz":300,"elapsed":486,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"4792f710-3bde-4dc7-b0ce-25a9df164aa5"},"source":["def diameter(aWalk):\n","  return max(aWalk) - min(aWalk)\n","\n","W = randomWalk(30)\n","print(W)\n","print(diameter(W))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 12, 13, 14, 13, 12, 11, 10, 11, 12, 11, 10, 11, 10, 9]\n","14\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UCnHRg3OhFmz"},"source":["Compute the average diameter for a bunch of random walks, all with the same number of steps. (You might want to write a function to do this.)"]},{"cell_type":"code","metadata":{"id":"fGjb09RfhD8G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618247989818,"user_tz":300,"elapsed":947,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"cb2a26aa-5d28-4f00-83a0-4e32cfd3999a"},"source":["def avgDiameter(numWalks, numSteps):\n","  #make a llist of th ediameters of numWalks random walks, each with numSteps steps.\n","  diams = [diameter(randomWalk(numSteps)) for _ in range(numWalks)]\n","  #print(diams)\n","  return sum(diams)/numWalks\n","\n","avgDiameter(20,1000)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["47.3"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"ecKHA9yU8HfI"},"source":["**How does the diameter depend on the number of steps?**\n","\n","Create a plot that shows the average diameter of a random walk as a function of the number of steps. Make a conjecture for the growth rate of the average diameter."]},{"cell_type":"code","metadata":{"id":"dt66QAcC8bVT","colab":{"base_uri":"https://localhost:8080/","height":316},"executionInfo":{"status":"ok","timestamp":1618248718339,"user_tz":300,"elapsed":49120,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"28429b0e-640f-4e71-d273-f32623c69e2f"},"source":["avgDiameter(20,10000)\n","#plot: number of steps on x, avg. diameter on y. I want 1000 steps on x-axis, but I probalby don't want 1000 dtaa points.\n","nvals = range(100, 10000, 100)#numbers of steps\n","avgDiam = [avgDiameter(100, n) for n in nvals]#find avg diameter for 1000 walks for each value of n\n","print(avgDiam)\n","\n","\n","plt.plot(nvals, avgDiam, 'go');\n","plt.xlabel(\"num steps\")\n","plt.ylabel(\"avg. diameter\")\n","\n","#load a curve-fit library?\n","#prof had some thing on his notes where he makes stuff squared.\n","#afvDiam is approximated well by a square root function.\n","from scipy import stats"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[14.61, 22.17, 27.78, 30.51, 34.42, 37.38, 39.19, 44.33, 46.04, 48.85, 50.85, 55.53, 54.35, 62.31, 63.4, 62.03, 63.74, 68.33, 67.59, 71.68, 72.59, 75.23, 75.23, 78.06, 77.03, 80.5, 79.79, 82.78, 83.69, 87.09, 84.04, 87.15, 90.27, 94.65, 91.11, 94.62, 98.07, 101.22, 102.36, 98.4, 102.15, 103.64, 104.32, 104.15, 103.63, 102.45, 101.82, 108.66, 107.79, 110.58, 113.92, 116.11, 120.38, 114.22, 119.21, 117.43, 113.64, 119.25, 119.66, 125.08, 124.71, 119.03, 130.28, 124.85, 123.8, 124.03, 135.41, 129.43, 129.26, 132.71, 132.0, 131.77, 134.11, 136.29, 131.61, 142.91, 139.05, 144.7, 130.17, 142.04, 140.68, 141.15, 142.24, 146.64, 142.24, 150.9, 149.84, 151.66, 147.91, 151.32, 153.6, 148.56, 149.55, 158.71, 157.61, 159.14, 164.7, 148.02, 161.55]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":232},"id":"fzXtuw2uJXVE","executionInfo":{"status":"error","timestamp":1618248976310,"user_tz":300,"elapsed":687,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"5762351a-f03c-419e-db01-61a22ef18c0c"},"source":["res = stats.linregress(nvals, squareDiams)\n","print(res)\n","#get linear fucntion: square root of linear fucntion. y = sqrt(2.5x - 30). plot it and see if it fits well.\n","#why is the y-intercept -30 and not 0? it should technically be 0 but it's not. future invesigation?\n","m = res.slope\n","b = res.intercept\n","print(m, b)\n","\n","yvals = [math.sqrt(m*n + b) for n in nvals]\n","plt.plot(nvals, avgDiam, 'go')\n","plt.plot(nvals, math.sqrt(m*nvals + b))\n","plt.xlabel(\"number of steps\")\n","plt.ylabel(\"average diameter\")\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-c9853cea926e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnvals\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msquareDiams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#get linear fucntion: square root of linear fucntion. y = sqrt(2.5x - 30). plot it and see if it fits well.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#why is the y-intercept -30 and not 0? it should technically be 0 but it's not. future invesigation?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslope\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'squareDiams' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"qDXzQmEBIzYM"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"Aa9smncMjqeA"},"source":["## 3. Number of Visits to Origin\n","\n","How often does a random walk return to the origin? \n","\n","Count the number of times that the random walk returns to the origin in, say, the first 1000 steps. \n","\n","Note that Python lists have a `count` function that counts the number of occurrences of an item in the list. This function is a *method* of the Python list object, so it is accessed like this:\n","\n","`list.count(x)`\n","\n","where `x` is the item that you want to count in `list`."]},{"cell_type":"code","metadata":{"id":"z6W8zI_x9Ows"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"polUlMTgkW1O"},"source":["Simulate a bunch of random walks with the same number of steps. For each, count the number of times that it returns to the origin. Make a histogram of the counts."]},{"cell_type":"code","metadata":{"id":"B31tHvneCCNt"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SPzPKwOEkwie"},"source":["**How does the number of visits to the origin depend on the number of steps?**\n","\n","Create a plot that shows the average number of visits to the origin as a function of the number of steps. Make a conjecture for the growth rate of the average number of visits to the origin."]},{"cell_type":"code","metadata":{"id":"iJMVExurCW9G"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y8nf1JdW-M1D"},"source":["## 4. Distribution of Locations\n","\n","How often does a random walk visit each position on the number line? Start your investigation by making histogram showing the distribution of positions in a random walk. Run your code several times to see histograms for different random walks, with various numbers of steps."]},{"cell_type":"code","metadata":{"id":"zeUCcLhPcDIn"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gpPCuLWQdePH"},"source":["Would the distribution be different if we combine the position lists from multiple random walks?\n","\n","Generate many random walks and combine their positions into a single list. Then make a histogram of the values in this big list. Make a conjecture about what sort of distribution you find.\n","\n","Note that in Python, the + operator concatenates lists."]},{"cell_type":"code","metadata":{"id":"81hy8o2vcH5D"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_bNGSpOcnUhT"},"source":["## 5. Investigate your own questions!\n","\n","What questions do you have about one-dimensional random walks? Investigate!\n","\n","You could also try modifying the procedure for generating random walks. For example, instead of steps of +1 and -1 with equal probability, you could try some other way of producing random steps."]},{"cell_type":"code","metadata":{"id":"-A5LE5_vqssn"},"source":[""],"execution_count":null,"outputs":[]}]}