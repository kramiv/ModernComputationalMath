{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Final Project","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMn+Dte1Vr2eKf+QqHpN2YB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"xvr7um1fRCgR","executionInfo":{"status":"ok","timestamp":1621693744635,"user_tz":300,"elapsed":630,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["import math\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":34,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"78JZTFxOQ5uR"},"source":["#UNBOUNDED DUCCI SEQUENCES\n","Investigate the sequences that arise from iterating Ducciâ€™s function and provide evidence for Theorem 1.1 in the paper. Then investigate other results from the paper and try to make your own conjectures. The paper ends with some open questions; can you come up with your own questions?"]},{"cell_type":"markdown","metadata":{"id":"Or4DznKsRJPq"},"source":["####First, create a module for Ducci's function\n","The Ducci sequence is a \"simple iterative problem...about the limiting behavior of finite strings.\"\n","\n","This is basically a function that goes from a set of real numbers to a set of real numbers in the same dimension.\n","\n","It looks like this: \n","\n","If I input a string of numbers (1, 10, 4, 6), then the output is (1-10, 10-4, 4-6, 6-1)  which is (9, 6, 2, 5)."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cdGdY_1dT_N9","executionInfo":{"status":"ok","timestamp":1621693744809,"user_tz":300,"elapsed":780,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"ba641322-2f88-49cf-903c-208e2daaeae4"},"source":["#Manually solve one iteration\n","\n","list = [1, 10, 4, 6]\n","list2 = [abs(list[0]-list[1]), abs(list[1]-list[2]), abs(list[2]-list[3]), abs(list[3]-list[0])]\n","\n","print(list)\n","print(list2)\n","list[3]"],"execution_count":35,"outputs":[{"output_type":"stream","text":["[1, 10, 4, 6]\n","[9, 6, 2, 5]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3vlE1sf5VQAQ","executionInfo":{"status":"ok","timestamp":1621693745153,"user_tz":300,"elapsed":1107,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"bf010749-b827-4f5e-cf88-6f8c439d792f"},"source":["#Create a loop that will solve one iteration\n","\n","i = 0\n","n = len(list)\n","ouput = []\n","for i in range(n-1):\n","  print(abs(list[i] - list[i+1]))\n","  i = i + 1\n","abs(list[0]-list[n-1])\n","#need to append"],"execution_count":36,"outputs":[{"output_type":"stream","text":["9\n","6\n","2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PnjdGkeWQuWK","executionInfo":{"status":"ok","timestamp":1621693745169,"user_tz":300,"elapsed":1110,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"efa6c494-ee6b-4fc5-80cd-53bd248d6b28"},"source":["#Create a function where I can input a list and return an iteration\n","\n","def iteration(listinput):\n","  i = 0\n","  n = len(listinput)\n","  output = []\n","  for i in range(n-1):\n","    output.append(abs(listinput[i] - listinput[i+1]))\n","    i = i + 1\n","  output.append(abs(listinput[0]-listinput[n-1]))\n","  return output\n","iteration(list) == list2"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"vfYkq0hUROyD"},"source":["####Create some sequences by iterating the function"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TL50nomZaTJM","executionInfo":{"status":"ok","timestamp":1621693745172,"user_tz":300,"elapsed":1099,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"6dec7e91-1ea5-426f-e33c-cfb3242a3a7c"},"source":["#iterate list multiple times. Want to change the for i in range to a while loop for number of iterations.\n","result = list\n","print(result)\n","for i in range(10):\n","  result = iteration(result)\n","  print(result)\n","print(result)\n","if sum(result) == 0:#brainstorming how to get the number of iterations until all 0\n","  print(\"all 0\")"],"execution_count":38,"outputs":[{"output_type":"stream","text":["[1, 10, 4, 6]\n","[9, 6, 2, 5]\n","[3, 4, 3, 4]\n","[1, 1, 1, 1]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","[0, 0, 0, 0]\n","all 0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kB16fQk5Dgsi","executionInfo":{"status":"ok","timestamp":1621693745177,"user_tz":300,"elapsed":1091,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"50bd8199-d369-47bb-d043-21840a67aaa1"},"source":["print(list)\n","result = list\n","#input new list here. First, I want to use list to see if it gets the length correctly.\n","numits = 0\n","while (False in result) == False:#should take 4 iterations\n","  result = iteration(result)\n","  print(result)\n","  numits = numits + 1\n","print(numits)\n","\n","#I can stick this all into a loop to return it multiple times. I need to return the length with the number of iterations (prove it is finite)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["[1, 10, 4, 6]\n","[9, 6, 2, 5]\n","[3, 4, 3, 4]\n","[1, 1, 1, 1]\n","[0, 0, 0, 0]\n","4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SHyUbYF_Gwzx","executionInfo":{"status":"ok","timestamp":1621693745179,"user_tz":300,"elapsed":1072,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"9dd389b6-3587-45b6-d7b1-9abbed584340"},"source":["#create a module with possible max list length as input\n","\n","def lengthnumit(max):\n","  length = random.randint(2, max)\n","  uselist = []\n","  i = 0\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  print(result)\n","  numits = 0\n","  numits = 0\n","  while sum(result) > 0 and numits < 1000:#put an upper bound on it for now\n","    result = iteration(result)\n","    print(result)\n","    numits = numits + 1\n","  #print(numits)\n","  return length, numits#return length of sequence and the number of iterations to 0.\n","\n","lengthnumit(4)"],"execution_count":40,"outputs":[{"output_type":"stream","text":["[27, 81, 82, 33]\n","[54, 1, 49, 6]\n","[53, 48, 43, 48]\n","[5, 5, 5, 5]\n","[0, 0, 0, 0]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(4, 4)"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FZMNHP3UNIt7","executionInfo":{"status":"ok","timestamp":1621693745183,"user_tz":300,"elapsed":1064,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"2444d33b-5451-46de-b2aa-7101f2d39b0b"},"source":["#adjust the module amove so there are no print statements\n","#also, use the input length and not use it as a max.\n","def lengthnumitt(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  numits = 0\n","  while sum(result) > 0 and numits < 1000:#put an upper bound on it for now\n","    result = iteration(result)\n","    numits = numits + 1\n","  return length, numits\n","lengthnumitt(4)"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4, 4)"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"wkWMa_BslM91"},"source":["####Provide evidence for Theorem 1.1\n","Theorem 1.1 : \"Every integer string of length n will iterate to the zero-string in a finite number steps if and only if n = 2^m for some positive integer m.\"\n","\n","show that lengths of n = 2^m iterates to 0 string\n","\n","if it is not n= 2^m, then it does not iterate to teh 0 string."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dG5SY2OhVlIw","executionInfo":{"status":"ok","timestamp":1621693746110,"user_tz":300,"elapsed":1974,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"0f684c06-68ea-4800-91d7-cc4c9c4ae6e3"},"source":["#get means of each length for all numbers, arbitrarily chosen from 0 to 19.\n","i = 1#minimum positive integer.\n","lengthslist = []\n","iterationslist = []\n","for i in range(2, 20):#changed to 2, 20 not just 20\n","  result = lengthnumitt(i)\n","  meanresult = [lengthnumitt(i)[1] for _ in range(20)];\n","  mean = sum(meanresult)/len(meanresult)\n","  #listmeans.append(mean)\n","  length = result[0]\n","  #iterations = result[1]\n","  lengthslist.append(length)\n","  iterationslist.append(mean)\n","  i = i + 2#test manual input list lengths\n","print(lengthslist)\n","print(iterationslist)\n"],"execution_count":42,"outputs":[{"output_type":"stream","text":["[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n","[2.0, 1000.0, 5.15, 1000.0, 1000.0, 1000.0, 15.85, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 29.8, 1000.0, 1000.0, 1000.0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"Hh5chfObOFPN","executionInfo":{"status":"ok","timestamp":1621693747633,"user_tz":300,"elapsed":3484,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"8df337bc-7d36-4451-b3dd-13429307a737"},"source":["#First, I will plot all list lengths up to 20.\n","i = 1#minimum positive integer.\n","lengthslist = []\n","iterationslist = []\n","for i in range(20):\n","  result = lengthnumitt(i)\n","  meanresult = [lengthnumitt(i)[1] for _ in range(20)];\n","  mean = sum(meanresult)/len(meanresult)\n","  #listmeans.append(mean)\n","  length = result[0]\n","  #iterations = result[1]\n","  lengthslist.append(length)\n","  iterationslist.append(mean)\n","  i = i + 2#test manual input list lengths\n","print(lengthslist)\n","print(iterationslist)\n","\n","plt.plot(lengthslist, iterationslist, \"go\")#try zooming in\n","plt.xlabel(\"length of iterated list\")\n","plt.ylabel(\"number of iterations until all 0\")"],"execution_count":43,"outputs":[{"output_type":"stream","text":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n","[0.0, 1.0, 2.0, 1000.0, 4.6, 1000.0, 1000.0, 1000.0, 15.75, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 30.3, 1000.0, 1000.0, 1000.0]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations until all 0')"]},"metadata":{"tags":[]},"execution_count":43},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TSpKxmCxtvyT","executionInfo":{"status":"ok","timestamp":1621693748464,"user_tz":300,"elapsed":4302,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"61807409-4404-4fe2-8513-64f0e5752b6f"},"source":["#try explaining why it does not reach the 0 string.\n","#isolate non-1000 oints and see what trend it makes.\n","#oh. print out the numbers that print out and look for patterns.\n","#patterns of 0s and 1s for 5. What other patterns for other numbers - I could look at those.\n","\n","#modify code to create a list of numbers that don't iterate under 1000 from the plot above:\n","i = 1\n","lengthslistt = []\n","iterationslistt = []\n","for i in range(2, 20):\n","  result = lengthnumitt(i)\n","  meanresult = [lengthnumitt(i)[1] for _ in range(20)];\n","  mean = sum(meanresult)/len(meanresult)\n","  length = result[0]\n","  if mean == 1000:\n","    lengthslistt.append(length)\n","    iterationslistt.append(mean)\n","  i = i + 2#test manual input list lengths\n","print(lengthslistt)\n","print(iterationslistt)\n","\n","#compare these list lengths to 2**k:\n","vals = [2]\n","k = 2\n","while max(vals) < 20:\n","  value = 2**k\n","  vals.append(value)\n","  k = k + 1\n","print(vals)\n","#see if there are any list lengths 2**k that are in this chunk of 1000-numbers:\n","def sharedlist(list1, list2):\n","    result = []\n","    for i in list1:\n","        if i in list2:\n","            result.append(i)\n","    return result\n","sharedlist(vals, lengthslist)\n","\n","#there are no common numbers shared. \n","#Now that I have confirmed that there are no list lengths of 2**k in the 1000-numbers:\n","#What are the properties of these numbers? print them out."],"execution_count":44,"outputs":[{"output_type":"stream","text":["[3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]\n","[1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0]\n","[2, 4, 8, 16, 32]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[2, 4, 8, 16]"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qW7ndAq7yRpX","executionInfo":{"status":"ok","timestamp":1621693748465,"user_tz":300,"elapsed":4293,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"58e1f46d-c6e1-436b-9d20-2cc7346950a1"},"source":["#print out the number sequences:\n","def lengthnumittt(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,30)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  numits = 0\n","  print(result)\n","  while sum(result) > 0 and numits < 100:#put an upper bound on it for now\n","    result = iteration(result)\n","    numits = numits + 1\n","    print(result)\n","  return length, numits\n","\n","for i in lengthslist[:4]:\n","  print(\"length list value: \", i)\n","  lengthnumittt(i)\n","\n","#these numbers appear to cycle between some number and 0. \n","#They cycle, so this cycle appears to be infinite and they never reach the zero-string.\n","\n","#3: 3 combos\n","#5: 16 combos\n","#6: 6 combos\n","#7: 15 combos\n","\n","#I tried seeing if I could find a pattern from these numbers for predicting the\n","# unique combinations by counting what patterns of 1s and 0s there were, but I \n","#think I am limited by that for now. I could maybe sum up the columns for various \n","#lists of the same length, but, for now, it is enough to see that they just cycle\n","#and never reach 0, at least up to 1000 iterations"],"execution_count":45,"outputs":[{"output_type":"stream","text":["length list value:  0\n","[]\n","length list value:  1\n","[26]\n","[0]\n","length list value:  2\n","[16, 28]\n","[12, 12]\n","[0, 0]\n","length list value:  3\n","[1, 6, 1]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n","[0, 5, 5]\n","[5, 0, 5]\n","[5, 5, 0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"Mh1II1hwyu8T","executionInfo":{"status":"ok","timestamp":1621693748861,"user_tz":300,"elapsed":4679,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"bed1f47f-f655-4d5e-9e4e-432d69b379af"},"source":["plt.plot(lengthslistt, iterationslistt)\n","plt.xlabel(\"length of list\")\n","plt.ylabel(\"number of iterations completed\")"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations completed')"]},"metadata":{"tags":[]},"execution_count":46},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l9y9-_UURcYK","executionInfo":{"status":"ok","timestamp":1621693838968,"user_tz":300,"elapsed":94775,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"bdf283ec-0ce7-47ec-8522-577c6504bed0"},"source":["#Now, I will plot all list lengths that are n = 2^m.\n","i = 2#lowest positive number for this theorem.\n","lengthslist2 = []\n","iterationslist2 = []\n","for i in range(15):\n","  n = 2**i\n","  result = lengthnumitt(n)\n","  meanresult = [lengthnumitt(n)[1] for _ in range(10)];\n","  mean = sum(meanresult)/len(meanresult)\n","  length = result[0]\n","  #iterations = result[1]\n","  lengthslist2.append(length)\n","  iterationslist2.append(mean)\n","  i = i + 1#test manual input list lengths\n","print(lengthslist2)\n","print(iterationslist2)"],"execution_count":47,"outputs":[{"output_type":"stream","text":["[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]\n","[0.9, 2.0, 5.0, 15.9, 34.7, 45.1, 63.3, 127.4, 254.7, 511.3, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"-9CJX94ySwK4","executionInfo":{"status":"ok","timestamp":1621693839087,"user_tz":300,"elapsed":94881,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"57f015c7-0c0d-413d-fc54-b15d7d932f82"},"source":["plt.plot(lengthslist2, iterationslist2, \"go\")#try zooming in\n","plt.xlabel(\"length of iterated list\")\n","plt.ylabel(\"number of iterations until all 0\")"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations until all 0')"]},"metadata":{"tags":[]},"execution_count":48},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rf5bBHakULG7","executionInfo":{"status":"ok","timestamp":1621693854448,"user_tz":300,"elapsed":110227,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"5989fb3f-fcac-4d14-b726-46288a8411ad"},"source":["#Try replotting above for a larger possible number of iterations\n","\n","def lengthnumitttt(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  numits = 0\n","  while sum(result) > 0 and numits < 100000:#put an upper bound on it for now\n","    result = iteration(result)\n","    numits = numits + 1\n","  return length, numits\n","lengthnumittt(4)\n","\n","i = 2\n","lengthslist4 = []\n","iterationslist4 = []\n","for i in range(12):\n","  n = 2**i\n","  result = lengthnumitttt(n)\n","  meanresult = [lengthnumitttt(n)[1] for _ in range(10)];\n","  mean = sum(meanresult)/len(meanresult)\n","  length = result[0]\n","  #iterations = result[1]\n","  lengthslist4.append(length)\n","  iterationslist4.append(mean)\n","  i = i + 1#test manual input list lengths\n","print(lengthslist4)\n","print(iterationslist4)"],"execution_count":49,"outputs":[{"output_type":"stream","text":["[10, 5, 14, 24]\n","[5, 9, 10, 14]\n","[4, 1, 4, 9]\n","[3, 3, 5, 5]\n","[0, 2, 0, 2]\n","[2, 2, 2, 2]\n","[0, 0, 0, 0]\n","[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n","[1.0, 2.0, 4.4, 16.8, 32.1, 56.5, 97.5, 127.0, 255.2, 510.3, 1023.4, 2047.4]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"y6HJG9S6UuxL","executionInfo":{"status":"ok","timestamp":1621693854682,"user_tz":300,"elapsed":110446,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"955acd01-6a16-4229-8556-d47831c3a2fd"},"source":["plt.plot(lengthslist4, iterationslist4, \"go\")#try zooming in\n","plt.xlabel(\"length of iterated list\")\n","plt.ylabel(\"number of iterations until all 0\")\n","\n","#very linear. can predict number of iterations, so it is finite"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations until all 0')"]},"metadata":{"tags":[]},"execution_count":50},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"hbhjm6eIgCPf"},"source":["When plotting all numbers for a certain, arbitrary range, some numbers iterate to 0 within a fairly short sequence. Other numbers shoot off to a very high number with an unsolved iteration length.\n","\n","When removing numbers from this list that are of the form 2^k (k is positive), the remaining numbers all approach a cycle. They do not approach 0. \n","\n","Then, when plotting iteration lengths using values of the form 2^k, the result is a graph with a very linear set of points. This indicates that, at least up to a length of around 2000, the number of iterations of the list to 0 can be solved for predictably. i.e., it iterates to 0 in a finite length.\n","\n","Meanwhile, values that are not 2^k are just a cycle. The maximum iteration length does not matter because they just cycle continuously.\n"]},{"cell_type":"markdown","metadata":{"id":"H1jQqZEGRaxf"},"source":["##Investigate other results from the paper and make my own conjectures\n","\n","Do strings with negative values iterate more quickly to zero than positive values?\n","\n","I will use theorem 1.1 to explore this question."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aVjcRmd-sNJF","executionInfo":{"status":"ok","timestamp":1621693854689,"user_tz":300,"elapsed":110441,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"e134fdd8-415d-46df-b5a5-bd716dafbac8"},"source":["def lengthnum(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    temp = temp*(-1)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  print(result)\n","  numits = 0\n","  while sum(result) != 0 and numits < 100000:#put an upper bound on it for now\n","    result = iteration(result)\n","    numits = numits + 1\n","    print(result)\n","  return length, numits\n","lengthnum(4)\n"],"execution_count":51,"outputs":[{"output_type":"stream","text":["[-59, -90, -13, -61]\n","[31, 77, 48, 2]\n","[46, 29, 46, 29]\n","[17, 17, 17, 17]\n","[0, 0, 0, 0]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(4, 4)"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhy4xBmUwNCW","executionInfo":{"status":"ok","timestamp":1621693870160,"user_tz":300,"elapsed":125902,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"b3a7363e-af02-4d60-9316-304979799f9c"},"source":["def lengthnumittttt(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    temp = temp*(-1)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  #print(result)\n","  numits = 0\n","  while sum(result) != 0 and numits < 100000:#put an upper bound on it for now\n","    result = iteration(result)\n","    numits = numits + 1\n","    #print(result)\n","  return length, numits\n","\n","i = 2\n","lengthslist5 = []\n","iterationslist5 = []\n","for i in range(12):\n","  n = 2**i\n","  result = lengthnumittttt(n)\n","  meanresult = [lengthnumittttt(n)[1] for _ in range(10)];\n","  mean = sum(meanresult)/len(meanresult)\n","  length = result[0]\n","  #iterations = result[1]\n","  lengthslist5.append(length)\n","  iterationslist5.append(mean)\n","  i = i + 1#test manual input list lengths\n","print(lengthslist5)\n","print(iterationslist5)"],"execution_count":52,"outputs":[{"output_type":"stream","text":["[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n","[1.0, 2.0, 4.9, 16.0, 30.7, 43.7, 74.9, 127.2, 255.1, 510.5, 1022.9, 2047.7]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"Yiq6wPQUxKQa","executionInfo":{"status":"ok","timestamp":1621693870390,"user_tz":300,"elapsed":126117,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"d9bc505a-afcd-4dd5-b8a2-d4dddd264de0"},"source":["plt.plot(lengthslist5, iterationslist5, \"go\")\n","plt.plot(lengthslist4, iterationslist4, \"mo\")#try zooming in\n","plt.xlabel(\"length of iterated list\")\n","plt.ylabel(\"number of iterations until all 0\")"],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations until all 0')"]},"metadata":{"tags":[]},"execution_count":53},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nK6XE_0CxUd0"},"source":["As it appears that the slope is the same, there is no difference between negative and positive starting values for list lengths of 2^k."]},{"cell_type":"markdown","metadata":{"id":"o0tNsL0Bxl-n"},"source":["###When iteration is done by subtracting values that are two spaces apart, does theorem 1.1 still hold?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SGeuhPju0PNN","executionInfo":{"status":"ok","timestamp":1621693870405,"user_tz":300,"elapsed":126121,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"1a5b8c82-23fe-4cbb-beef-1983d934e8db"},"source":["#I need to create new modules for this.\n","\n","def iterationtwo(listinput):\n","  i = 0\n","  n = len(listinput)\n","  output = []\n","  for i in range(n-2):\n","    output.append(abs(listinput[i] - listinput[i+2]))#0-2, 1-3\n","    i = i + 1\n","  output.append(abs(listinput[n-2]-listinput[0]))\n","  output.append(abs(listinput[n-1]-listinput[1]))\n","  return output\n","listb = [95, 88, 6, 25, 65, 100, 40, 73]\n","listbit = [89, 63, 59, 75, 25, 27, 55, 15]\n","iterationtwo(listb) == listbit"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1St5pkRpTJNs","executionInfo":{"status":"ok","timestamp":1621693870408,"user_tz":300,"elapsed":126114,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"f6c1eeb3-b708-4022-b2fc-e468804870d8"},"source":["def lengthnumittwo(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  #print(result)\n","  numits = 0\n","  while sum(result) > 0 and numits < 1000:#put an upper bound on it for now\n","    result = iterationtwo(result)\n","    numits = numits + 1\n","    #print(result)\n","  return length, numits\n","lengthnumittwo(8)"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(8, 4)"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E05xDolKV6nR","executionInfo":{"status":"ok","timestamp":1621693878155,"user_tz":300,"elapsed":133851,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"9df63684-fbc7-4e97-d842-319222ba9ab0"},"source":["#now, loop it\n","lengthslisttwo = []\n","iterationslisttwo = []\n","for i in range(1,12):\n","  n = 2**i\n","  result = lengthnumittwo(n)\n","  meanresult = [lengthnumittwo(n)[1] for _ in range(10)];\n","  mean = sum(meanresult)/len(meanresult)\n","  length = result[0]\n","  #iterations = result[1]\n","  lengthslisttwo.append(length)\n","  iterationslisttwo.append(mean)\n","  i = i + 1#test manual input list lengths\n","print(lengthslisttwo)\n","print(iterationslisttwo)"],"execution_count":56,"outputs":[{"output_type":"stream","text":["[2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n","[1.0, 2.0, 6.3, 18.2, 31.0, 65.3, 81.9, 127.1, 255.9, 511.8, 1000.0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H2cYszxgXQUY","executionInfo":{"status":"ok","timestamp":1621693878347,"user_tz":300,"elapsed":134032,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"5ae80690-6b5b-410e-f5aa-a81ba39f71cf"},"source":["#interestingly, it appeasr that the numbers do appear to follow some trend. \n","#So, I will try plotting for all values and plot them near n=2^k as well.\n","\n","lengthslisttwob = []\n","iterationslisttwob = []\n","for i in range(2,15):\n","  result = lengthnumittwo(i)\n","  meanresult = [lengthnumittwo(i)[1] for _ in range(10)];\n","  mean = sum(meanresult)/len(meanresult)\n","  length = result[0]\n","  lengthslisttwob.append(length)\n","  iterationslisttwob.append(mean)\n","  i = i + 1#test manual input list lengths\n","print(lengthslisttwob)\n","print(iterationslisttwob)"],"execution_count":57,"outputs":[{"output_type":"stream","text":["[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n","[1.0, 1000.0, 2.0, 1000.0, 1000.0, 1000.0, 6.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"hZne6lNVY-kx","executionInfo":{"status":"ok","timestamp":1621693878702,"user_tz":300,"elapsed":134375,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"e544de38-e646-4f8e-b5aa-4bda26d1f7fa"},"source":["plt.plot(lengthslisttwob, iterationslisttwob, \"mo\")#try zooming in\n","plt.xlabel(\"length of iterated list\")\n","plt.ylabel(\"number of iterations until all 0\")"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations until all 0')"]},"metadata":{"tags":[]},"execution_count":58},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"KyaYQMhcYJnr","executionInfo":{"status":"ok","timestamp":1621693878979,"user_tz":300,"elapsed":134638,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"05f5d72a-bc5f-4581-f280-def2713dcf5b"},"source":["plt.plot(lengthslisttwo, iterationslisttwo, \"go\")\n","plt.xlabel(\"length of iterated list\")\n","plt.ylabel(\"number of iterations until all 0\")"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'number of iterations until all 0')"]},"metadata":{"tags":[]},"execution_count":59},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ck03F1u-ZHAN","executionInfo":{"status":"ok","timestamp":1621693878984,"user_tz":300,"elapsed":134638,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["#It appears that both plots look similar to the plots before. \n","#On the plot, the few numbers that do not shoot up to 1000 are of the form n=2^k. (2, 4, 8).\n","#what does the iteration pattern of the other numbers look like?"],"execution_count":60,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yKft-oF7YMuJ","executionInfo":{"status":"ok","timestamp":1621693878991,"user_tz":300,"elapsed":134627,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"6d4cb94b-a629-4d17-db46-cd1f68939a28"},"source":["def lengthnumittwo2(max):\n","  length = max\n","  uselist = []\n","  i = 2\n","  for i in range(2, length+2):\n","    temp = random.randint(0,100)\n","    uselist.append(temp)\n","    i = i + 1\n","  result = uselist\n","  print(result)\n","  numits = 0\n","  while sum(result) > 0 and numits < 30:#put an upper bound on it for now\n","    result = iterationtwo(result)\n","    numits = numits + 1\n","    print(result)\n","  return length, numits\n","lengthnumittwo2(3)"],"execution_count":61,"outputs":[{"output_type":"stream","text":["[13, 21, 1]\n","[12, 8, 20]\n","[8, 4, 12]\n","[4, 4, 8]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n","[4, 0, 4]\n","[0, 4, 4]\n","[4, 4, 0]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(3, 30)"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cHB8zlqjZnRp","executionInfo":{"status":"ok","timestamp":1621693878992,"user_tz":300,"elapsed":134608,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"cd32dbe3-1611-4f53-ab05-64db302a34d8"},"source":["lengthnumittwo2(5)"],"execution_count":62,"outputs":[{"output_type":"stream","text":["[79, 87, 22, 61, 19]\n","[57, 26, 3, 18, 68]\n","[54, 8, 65, 39, 42]\n","[11, 31, 23, 15, 34]\n","[12, 16, 11, 4, 3]\n","[1, 12, 8, 8, 13]\n","[7, 4, 5, 7, 1]\n","[2, 3, 4, 0, 3]\n","[2, 3, 1, 2, 0]\n","[1, 1, 1, 0, 3]\n","[0, 1, 2, 1, 2]\n","[2, 0, 0, 1, 1]\n","[2, 1, 1, 1, 1]\n","[1, 0, 0, 1, 0]\n","[1, 1, 0, 0, 0]\n","[1, 1, 0, 1, 1]\n","[1, 0, 1, 0, 0]\n","[0, 0, 1, 1, 0]\n","[1, 1, 1, 1, 0]\n","[0, 0, 1, 0, 1]\n","[1, 0, 0, 0, 1]\n","[1, 0, 1, 1, 1]\n","[0, 1, 0, 0, 1]\n","[0, 1, 1, 0, 0]\n","[1, 1, 1, 0, 1]\n","[0, 1, 0, 1, 0]\n","[0, 0, 0, 1, 1]\n","[0, 1, 1, 1, 1]\n","[1, 0, 0, 1, 0]\n","[1, 1, 0, 0, 0]\n","[1, 1, 0, 1, 1]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(5, 30)"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ViEyrgTNZ1nv","executionInfo":{"status":"ok","timestamp":1621693878995,"user_tz":300,"elapsed":134595,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"7ccfe53d-dbc4-42f1-af5e-6971f7542037"},"source":["lengthnumittwo2(6)"],"execution_count":63,"outputs":[{"output_type":"stream","text":["[38, 44, 49, 76, 0, 99]\n","[11, 32, 49, 23, 38, 55]\n","[38, 9, 11, 32, 27, 23]\n","[27, 23, 16, 9, 11, 14]\n","[11, 14, 5, 5, 16, 9]\n","[6, 9, 11, 4, 5, 5]\n","[5, 5, 6, 1, 1, 4]\n","[1, 4, 5, 3, 4, 1]\n","[4, 1, 1, 2, 3, 3]\n","[3, 1, 2, 1, 1, 2]\n","[1, 0, 1, 1, 2, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n","[1, 0, 1, 1, 0, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n","[1, 0, 1, 1, 0, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n","[1, 0, 1, 1, 0, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n","[1, 0, 1, 1, 0, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n","[1, 0, 1, 1, 0, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n","[1, 0, 1, 1, 0, 1]\n","[0, 1, 1, 0, 1, 1]\n","[1, 1, 0, 1, 1, 0]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(6, 30)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ABebXiq8Z3N8","executionInfo":{"status":"ok","timestamp":1621693878996,"user_tz":300,"elapsed":134581,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"273b877f-377e-4eae-f932-3a6ae0bc9324"},"source":["lengthnumittwo2(7)"],"execution_count":64,"outputs":[{"output_type":"stream","text":["[84, 85, 24, 7, 34, 55, 44]\n","[60, 78, 10, 48, 10, 29, 41]\n","[50, 30, 0, 19, 31, 31, 37]\n","[50, 11, 31, 12, 6, 19, 7]\n","[19, 1, 25, 7, 1, 31, 4]\n","[6, 6, 24, 24, 3, 12, 3]\n","[18, 18, 21, 12, 0, 6, 3]\n","[3, 6, 21, 6, 3, 12, 15]\n","[18, 0, 18, 6, 12, 9, 9]\n","[0, 6, 6, 3, 3, 9, 9]\n","[6, 3, 3, 6, 6, 9, 3]\n","[3, 3, 3, 3, 3, 3, 0]\n","[0, 0, 0, 0, 3, 0, 3]\n","[0, 0, 3, 0, 0, 0, 3]\n","[3, 0, 3, 0, 3, 0, 3]\n","[0, 0, 0, 0, 0, 3, 3]\n","[0, 0, 0, 3, 3, 3, 3]\n","[0, 3, 3, 0, 0, 3, 3]\n","[3, 3, 3, 3, 3, 3, 0]\n","[0, 0, 0, 0, 3, 0, 3]\n","[0, 0, 3, 0, 0, 0, 3]\n","[3, 0, 3, 0, 3, 0, 3]\n","[0, 0, 0, 0, 0, 3, 3]\n","[0, 0, 0, 3, 3, 3, 3]\n","[0, 3, 3, 0, 0, 3, 3]\n","[3, 3, 3, 3, 3, 3, 0]\n","[0, 0, 0, 0, 3, 0, 3]\n","[0, 0, 3, 0, 0, 0, 3]\n","[3, 0, 3, 0, 3, 0, 3]\n","[0, 0, 0, 0, 0, 3, 3]\n","[0, 0, 0, 3, 3, 3, 3]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(7, 30)"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"QI_pzNsRarbx","executionInfo":{"status":"ok","timestamp":1621693878996,"user_tz":300,"elapsed":134577,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["#from before: \n","#3: 3 combos\n","#5: 16 combos\n","#6: 6 combos\n","#7: 15 combos\n","\n","#now:\n","#3: 3 combos\n","#5: 9 combos\n","#6: 3 combos\n","#7: 7 combos\n","\n","#it appears that the lengths of the cycles are shorter. \n","#Overall, there are still cycles for values at are not of the form n = 2^k. \n","#So, it appears that theorem 1.1 still holds when the iteration is done two \n","#steps apart, not one, at least for list lengths of 20 and up to roughly 1000 iterations."],"execution_count":65,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JyLcXaS4bAtw"},"source":["##Limitations and possible further research/questions:\n","\n","I have a limit on computing power, so I was limited to the list lengths I used and number of iterations (due to time).\n","\n","It appears that Theorem 1.1 holds for iterations taken two list steps apart. It appears to make the cycles of some sequences shorter. Is it possible to make list lengths that are not of the form n = 2^k converge or come closer to converging by taking the difference between numbers that are, for example, two spaces apart? Or:\n","\n","Are there more complex functions that could be performed between terms in a sequence (besides just taking the difference) that allow certain list lengths to iterate to 0? (for example, divide each term by two and then subtract)\n","\n","\n","The paper states \"Numerical evidence suggests that all 4-strings iterate eventually either to the zero-string or to some multiple of (5, 1, 1, 7), which diverges.\"\n","How would this condition hold with the questions above? \n","\n"]}]}