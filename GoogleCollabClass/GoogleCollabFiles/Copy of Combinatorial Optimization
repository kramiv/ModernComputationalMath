{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Combinatorial Optimization","provenance":[{"file_id":"1ngCAfhtwHpBq4_xSXrrULe0GXbl95WVF","timestamp":1619801527120}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ptRcLkh1ss44"},"source":["goal: minimize a function f: omega -> |R\n","\n","start at a random point x in omega  (x is a \"state\")\n","repeatedly choose a new point/state (usually near x).\n","If the new point is more optimal, then move there. Otherwise, we possibly move. we move to the less optimal point based on some probability that decreases over time.\n","eventually, we hope to end up at an optimal state or a near optimal state.\n","\n","issue: we don't know if a local minimum is a global minimum\n"]},{"cell_type":"code","metadata":{"id":"vJ09M6qHsmwK"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bkm4J4fNsmib"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"Xy6WmiUcM4x2"},"source":["# Combinatorial Optimization using Simulated Annealing\n","\n","Suppose you write the a number $N$ as the sum of $m$ non-negative integers. That is,\n","\n","$$ N = n_0 + n_1 + \\cdots + n_{m-1} $$\n","where each $n_i \\ge 0$. \n","\n","For example, if $m=4$, then $N=10$ can be written as $10 = 2 + 3 + 4 + 1$, or as $10 = 5 + 0 + 2 + 3$.\n","\n","**Here's a challenge:** Find the sum that maximizes the product function $g(n_0, n_1, \\dots, n_{m-1}) = n_0 n_1 \\cdots n_{m-1}$.\n","\n","Let's solve this problem using simulated annealing!"]},{"cell_type":"code","metadata":{"id":"_MsoZBLBMOgu","executionInfo":{"status":"ok","timestamp":1619801824040,"user_tz":300,"elapsed":985,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["import math\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0t1rku7oNaDE"},"source":["## The Domain\n","\n","The domain $\\Omega$ consists of all $m$-tuples (that is, ordered sequences of length $m$) of integers selected from $\\{0, 1, 2, \\ldots, N\\}$. Note that this is a discrete domain containing $N^m$ tuples. We will call each tuple a *state*. \n","\n","Here is one way of choosing a random state in $\\Omega$:"]},{"cell_type":"code","metadata":{"id":"mm5SajVVNnmN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619801824042,"user_tz":300,"elapsed":949,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"6a6b833d-ef6f-49d2-ff90-39851ff4a46c"},"source":["N = 100\n","m = 10\n","\n","rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","state = [rand.count(i) for i in range(m)]\n","state"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[13, 5, 9, 19, 9, 9, 6, 10, 9, 11]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"cZFpgbCTbSQT"},"source":["*Why does this code produce 10 non-negative integers that add up to 100?*"]},{"cell_type":"markdown","metadata":{"id":"2t1j5t6aO3-4"},"source":["## Proposing a Move\n","\n","Next, we need to decide how to propose a move from the current state.\n","\n","Here is one approach. If $(n_0, n_1, \\ldots, n_9)$ is the current state, then we can propose to transition to a new state as follows.\n","\n","* Randomly pick two indexes $i,j \\in \\{0, 1, \\ldots, 9\\}$.\n","* If $n_i > 0$, then decrease $n_i$ by one and increase $n_j$ by one.\n","* If $n_i = 0$, then do nothing.\n","\n","For example, suppose $(13, 6, 0, 16, 14, 9, 17, 6, 10, 9)$ is the current state. Randomly select, say, $i=1$ and $j=4$. In this case, we decrease $n_1$ by one and increase $n_4$ by one. The new state becomes $(13, 5, 0, 16, 15, 9, 17, 6, 10, 9)$.\n","\n","If we select $i=2$ and $j=3$, then the new state is the same as the current state, since we can't decrease $n_2 = 0$.\n","\n","Complete the `proposeMove` function in the following code cell."]},{"cell_type":"code","metadata":{"id":"J3LSET8hbZBs","executionInfo":{"status":"ok","timestamp":1619801830638,"user_tz":300,"elapsed":417,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["# function to propose a move on the domain\n","def proposeMove(currState):\n","\n","\n","  # complete this function\n","\n","\n","  return propState"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0_77oB6kTlMs"},"source":["## Function to Minimize\n","\n","We want to maximize the product $g(n_0, n_1, \\dots, n_{m-1}) = n_0 n_1 \\cdots n_{m-1}$. However, our simulated annealing code from last time is designed to find the *minimum* of a function.\n","\n","We can multiply by $-1$ to convert the maximization problem to a minimization problem. That is, we could try to minimize:\n","$$h(n_0, n_1, \\dots, n_{m-1}) = -n_0 n_1 \\cdots n_{m-1} $$\n","\n","However, the product of $m$ integers might be quite large. Even the *difference* between two such products might be quite large.  Our simulated annealing algorithm requires us to compute $e^{-\\frac{dh}{k}}$, where $dh$ is the difference between the products for the proposed state and the current state. This exponential could be very large or very close to zero.\n","\n","Thus, it's advantageous to work with the *log* of the product. This will ensure that the exponentials are of a more manageable size and help avoid numerical problems in the comptuation.\n","In other words, we want to minimize the following function:\n","$$f(n_0, n_1, \\dots, n_{m-1}) = -\\log(n_0 n_1 \\cdots n_{m-1}) $$\n","\n","*Unfortunately, there is still one problem with this plan to minimize $f$. What could go wrong? How could you fix it?*"]},{"cell_type":"code","metadata":{"id":"MkS1sVV4bnDg","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1619801834410,"user_tz":300,"elapsed":486,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"38b4bfd0-d1b8-4064-98aa-aee1e0e57d1e"},"source":["def f(state):\n","\n","  # complete this function\n"],"execution_count":4,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-e9957f17ad55>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    # complete this function\u001b[0m\n\u001b[0m                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"]}]},{"cell_type":"markdown","metadata":{"id":"PAkqQ3-dYjnO"},"source":["## The Simulated Annealing Algorithm\n","\n","Remember simulated annealing strategy:\n","\n","1. Propose a move.\n","2. If the move is to a *more* optimal state, then make the move.\n","3. If the move is to a *less* optimal state, then make the move with probability $\\rho = e^{-\\frac{df}{k}}$, where $k$ is the \"temperature\" parameter.\n","4. Decrease $k$ a little bit, and return to step 1."]},{"cell_type":"markdown","metadata":{"id":"LImkkpACb235"},"source":["Here is our `doMove` function. (It's the same as the function we wrote in the last class!)"]},{"cell_type":"code","metadata":{"id":"9s-y6in6PHt7"},"source":["# function to make a move, deciding whether or not to accept the proposed move\n","def doMove(currState, k):\n","  # propose a move\n","  propState = proposeMove(currState)\n","\n","  # compute the function value difference\n","  df = f(propState) - f(currState)\n","\n","  # if df < 0, then make the move\n","  if df < 0:\n","    return propState\n","  \n","  # if df > 0, then make the move with probability rho\n","  rho = math.exp(-df/k)\n","  rand = random.random()   # random number between 0 and 1\n","  if rand < rho: # then move\n","    return propState\n","  # else: don't move\n","  return currState"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gTnEU-kMZPJq"},"source":["Now we can simulate the random walk on the domain $\\Omega$ and search for an optimal state."]},{"cell_type":"code","metadata":{"id":"v_-bhsa6PPRp"},"source":["# simulate the random walk\n","numSteps = 100\n","k = 1\n","decFac = 0.95  # decrease factor\n","\n","rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","state = [rand.count(i) for i in range(m)]  # a random starting state\n","\n","print(\"starting state:\", state)\n","print(\"starting f(state):\", f(state))\n","print(\"starting product:\", np.prod(state))\n","\n","for i in range(numSteps):\n","  # make a move\n","  state = doMove(state, k)\n","\n","  # decrease k a little bit\n","  k = k*decFac\n","\n","print(\"ending state:\", state)\n","print(\"ending f(state):\", f(state))\n","print(\"ending product:\", np.prod(state))\n","print(\"k:\", k)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-9p1xrbiZqQ0"},"source":["## Investigation\n","\n","* Modify the code to store the value of the function $f$ for each visited state, and plot the values of $f$. Can you \"see\" how the states converge toward a state with minimum $f$ (and thus maximum product)?\n","\n","* Adjust the parameter values `numSteps`, `sig2`, and `decFac`. How do these parameters affect the performance of the algorithm?\n","\n","* Modify the code to count how many times the random walk proposes a move to a less optimal state, and how many times it make such a move. Make a list of the step numbers on which such moves are made. Do these moves get less common as $k$ decreases to zero?\n","\n","* What happens if you change $N$ and $m$?"]},{"cell_type":"code","metadata":{"id":"TomH2pytcflE"},"source":[""],"execution_count":null,"outputs":[]}]}