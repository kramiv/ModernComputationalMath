{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Copy of Combinatorial Optimization - Section B(keep)","provenance":[{"file_id":"1Xf8Mgm78HULnSO6UR_HnDU5Ki6nPANGZ","timestamp":1620337389487},{"file_id":"1dkMhfTNnrYEBWp3i3vlpU28fjgzfXNqh","timestamp":1620060516768},{"file_id":"1ngCAfhtwHpBq4_xSXrrULe0GXbl95WVF","timestamp":1619806787304}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"YGvP8ktrJoDT"},"source":["from last time: find 10 numbesr that sum to 100 whose product is maximum.\n","(from notebook: ten numbers was \"m\", sum 100 was \"n\")\n"]},{"cell_type":"markdown","metadata":{"id":"Xy6WmiUcM4x2"},"source":["# Combinatorial Optimization using Simulated Annealing\n","\n","Suppose you write the a number $N$ as the sum of $m$ non-negative integers. That is,\n","\n","$$ N = n_0 + n_1 + \\cdots + n_{m-1} $$\n","where each $n_i \\ge 0$. \n","\n","For example, if $m=4$, then $N=10$ can be written as $10 = 2 + 3 + 4 + 1$, or as $10 = 5 + 0 + 2 + 3$.\n","\n","**Here's a challenge:** Find the sum that maximizes the product function $g(n_0, n_1, \\dots, n_{m-1}) = n_0 n_1 \\cdots n_{m-1}$.\n","\n","Let's solve this problem using simulated annealing!"]},{"cell_type":"code","metadata":{"id":"_MsoZBLBMOgu","executionInfo":{"status":"ok","timestamp":1620436449100,"user_tz":300,"elapsed":303,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["import math\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0t1rku7oNaDE"},"source":["## The Domain\n","\n","The domain $\\Omega$ consists of all $m$-tuples (that is, ordered sequences of length $m$) of integers selected from $\\{0, 1, 2, \\ldots, N\\}$. Note that this is a discrete domain containing $N^m$ tuples. We will call each tuple a *state*. \n","\n","Here is one way of choosing a random state in $\\Omega$:"]},{"cell_type":"code","metadata":{"id":"mm5SajVVNnmN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620394063844,"user_tz":300,"elapsed":559,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"44c041b9-e63c-495e-de5a-39346a4451e2"},"source":["N = 120   # sum of the numbers\n","m = 9    # number of numbers\n","\n","rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","state = [rand.count(i) for i in range(m)]\n","print(state)\n","print(sum(state))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[25, 8, 12, 9, 10, 11, 16, 15, 14]\n","120\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cZFpgbCTbSQT"},"source":["*Why does this code produce 10 non-negative integers that add up to 100?*"]},{"cell_type":"markdown","metadata":{"id":"2t1j5t6aO3-4"},"source":["## Proposing a Move\n","\n","Next, we need to decide how to propose a move from the current state.\n","\n","Here is one approach. If $(n_0, n_1, \\ldots, n_9)$ is the current state, then we can propose to transition to a new state as follows.\n","\n","* Randomly pick two indexes $i,j \\in \\{0, 1, \\ldots, 9\\}$.\n","* If $n_i > 0$, then decrease $n_i$ by one and increase $n_j$ by one.\n","* If $n_i = 0$, then do nothing.\n","\n","For example, suppose $(13, 6, 0, 16, 14, 9, 17, 6, 10, 9)$ is the current state. Randomly select, say, $i=1$ and $j=4$. In this case, we decrease $n_1$ by one and increase $n_4$ by one. The new state becomes $(13, 5, 0, 16, 15, 9, 17, 6, 10, 9)$.\n","\n","If we select $i=2$ and $j=3$, then the new state is the same as the current state, since we can't decrease $n_2 = 0$.\n","\n","Complete the `proposeMove` function in the following code cell."]},{"cell_type":"markdown","metadata":{"id":"LhM3_ZHzK4iD"},"source":["idea: we want to maximize teh product of the 10 numbers.\n","\n","maximize n0*n1*n2*...n9 is the same as \n","\n","minimizing -n0*n1*n2*...n9\n","\n","or: -ln(n0*n1*n2*...n9)\n","\n","df = change in fucntion value. \n","compute e^(-df/k)\n","\n","-ln(n0*n1*n2*...n9 + 1)   prevents taking log(0)   <-      we will minimize this function for f(n0, ..., n9)\n"]},{"cell_type":"code","metadata":{"id":"J3LSET8hbZBs","executionInfo":{"status":"ok","timestamp":1620394097415,"user_tz":300,"elapsed":859,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["# function to propose a move on the domain\n","def proposeMove(currState):\n","  propState = currState.copy()  # make a copy of currState so that we don't modify currState\n","\n","  i,j = random.sample(range(m),2)   # select two distinct indexes from 0, 1, 2, ... m-1\n","\n","  # ensure propState[i] < N and propState[j] > 0\n","  while propState[i] == N or propState[j] == 0:#freezes if I do <= >=\n","    i,j = random.sample(range(m),2)\n","\n","  # increment propState[i] and decrement propState[j]\n","  propState[i] += 1\n","  propState[j] -= 1\n","\n","  return propState#, propState\n","#proposeMove(state)[0]#nice."],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cg2vmNXEFNAN","executionInfo":{"status":"ok","timestamp":1620394098731,"user_tz":300,"elapsed":404,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"c9c84294-5d70-447e-cf8b-966ed96084db"},"source":["# testing\n","print(state)\n","print(proposeMove(state))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[25, 8, 12, 9, 10, 11, 16, 15, 14]\n","[25, 8, 12, 8, 10, 11, 16, 15, 15]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0_77oB6kTlMs"},"source":["## Function to Minimize\n","\n","We want to maximize the product $g(n_0, n_1, \\dots, n_{m-1}) = n_0 n_1 \\cdots n_{m-1}$. However, our simulated annealing code from last time is designed to find the *minimum* of a function.\n","\n","We can multiply by $-1$ to convert the maximization problem to a minimization problem. That is, we could try to minimize:\n","$$h(n_0, n_1, \\dots, n_{m-1}) = -n_0 n_1 \\cdots n_{m-1} $$\n","\n","However, the product of $m$ integers might be quite large. Even the *difference* between two such products might be quite large.  Our simulated annealing algorithm requires us to compute $e^{-\\frac{dh}{k}}$, where $dh$ is the difference between the products for the proposed state and the current state. This exponential could be very large or very close to zero.\n","\n","Thus, it's advantageous to work with the *log* of the product. This will ensure that the exponentials are of a more manageable size and help avoid numerical problems in the comptuation.\n","In other words, we want to minimize the following function:\n","$$f(n_0, n_1, \\dots, n_{m-1}) = -\\log(n_0 n_1 \\cdots n_{m-1}) $$\n","\n","*Unfortunately, there is still one problem with this plan to minimize $f$. What could go wrong? How could you fix it?*"]},{"cell_type":"code","metadata":{"id":"MkS1sVV4bnDg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620394111949,"user_tz":300,"elapsed":516,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"3e6683aa-0beb-40f8-9235-55a7520a5929"},"source":["def f(state):#okay this is not working for some reason....\n","  return (-1)*(math.log( np.prod(state) + 1))#math.log gives natural log unless some otehr base is specified.\n","             #in my case, want to maximize the product of all rows = columns + diagonal. It is the maximal area of a square, isn't it? \n","print(state)\n","print(f(state))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[25, 8, 12, 9, 10, 11, 16, 15, 14]\n","-22.80062521254718\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PAkqQ3-dYjnO"},"source":["## The Simulated Annealing Algorithm\n","\n","Remember simulated annealing strategy:\n","\n","1. Propose a move.\n","2. If the move is to a *more* optimal state, then make the move.\n","3. If the move is to a *less* optimal state, then make the move with probability $\\rho = e^{-\\frac{df}{k}}$, where $k$ is the \"temperature\" parameter.\n","4. Decrease $k$ a little bit, and return to step 1."]},{"cell_type":"markdown","metadata":{"id":"LImkkpACb235"},"source":["Here is our `doMove` function. (It's the same as the function we wrote in the last class!)"]},{"cell_type":"code","metadata":{"id":"9s-y6in6PHt7","executionInfo":{"status":"ok","timestamp":1620394116047,"user_tz":300,"elapsed":781,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["# function to make a move, deciding whether or not to accept the proposed move\n","def doMove(currState, k):\n","  # propose a move\n","  propState = proposeMove(currState)\n","\n","  # compute the function value difference\n","  df = f(propState) - f(currState)\n","\n","  # if df < 0, then make the move\n","  if df < 0:\n","    return propState\n","  \n","  # if df > 0, then make the move with probability rho\n","  rho = math.exp(-df/k)\n","  rand = random.random()   # random number between 0 and 1\n","  if rand < rho: # then move\n","    return propState\n","  # else: don't move\n","  return currState\n","\n","#okay: class code is working. optimal state is all 10 numbers to maximize sum. The more I bring numbers rogether, the bigger product is. \n","#example: 1*99 vs. 50*50\n","#ending state where all numbers are the same. 10 10 10 10 10 10 10 10 10 10 "],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gTnEU-kMZPJq"},"source":["Now we can simulate the random walk on the domain $\\Omega$ and search for an optimal state.\n","\n","this optimization problem has one local minimum/global minimum. This is why this works and the decfac can be so small. For otehr problems with more than one local mins, we use soemthing closer to 1."]},{"cell_type":"code","metadata":{"id":"v_-bhsa6PPRp","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620394120339,"user_tz":300,"elapsed":820,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"66e1057d-e1f7-4df8-8c0a-ed8c5b3a17d8"},"source":["# simulate the random walk\n","numSteps = 100\n","k = 1\n","decFac = 0.95  # decrease factor\n","\n","rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","state = [rand.count(i) for i in range(m)]  # a random starting state\n","\n","fvals = [f(state)]#keep trac kof the values of f\n","\n","print(\"starting state:\", state)\n","print(\"starting f(state):\", f(state))\n","print(\"starting product:\", np.prod(state))\n","\n","for i in range(numSteps):\n","  # make a move\n","  state = doMove(state, k)\n","  fvals.append( f(state) )\n","\n","  # decrease k a little bit\n","  k = k*decFac\n","\n","print(\"ending state:\", state)\n","print(\"ending f(state):\", f(state))\n","print(\"ending product:\", np.prod(state))\n","print(\"k:\", k)\n","plt.plot(fvals)\n","plt.xlabel(\"step number\")\n","plt.ylabel(\"f(state)\")"],"execution_count":9,"outputs":[{"output_type":"stream","text":["starting state: [13, 10, 17, 14, 12, 14, 11, 18, 11]\n","starting f(state): -23.149931407111552\n","starting product: 11321069760\n","ending state: [15, 10, 18, 15, 13, 9, 14, 13, 13]\n","ending f(state): -23.140187232519914\n","ending product: 11211291000\n","k: 0.005920529220333997\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'f(state)')"]},"metadata":{"tags":[]},"execution_count":9},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NTVIMpmscW-t","executionInfo":{"status":"ok","timestamp":1620394124532,"user_tz":300,"elapsed":936,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"e9d1a615-4884-42cc-cedd-423d89c77f22"},"source":["state\n"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[15, 10, 18, 15, 13, 9, 14, 13, 13]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"rXQwHVzZcWpK"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"-9p1xrbiZqQ0"},"source":["## Investigation\n","\n","* Modify the code to store the value of the function $f$ for each visited state, and plot the values of $f$. Can you \"see\" how the states converge toward a state with minimum $f$ (and thus maximum product)?\n","\n","* Adjust the parameter values `numSteps`, `sig2`, and `decFac`. How do these parameters affect the performance of the algorithm?\n","\n","* Modify the code to count how many times the random walk proposes a move to a less optimal state, and how many times it make such a move. Make a list of the step numbers on which such moves are made. Do these moves get less common as $k$ decreases to zero?\n","\n","* What happens if you change $N$ and $m$?"]},{"cell_type":"markdown","metadata":{"id":"nghnrxmzq2n-"},"source":["states: assignment of 1,2,...n^2 into the n^2 boxes. there are 9! arrangements of numbers in the boxes. in general: (n^2)! states.\n","\n","transitions/moves: pick two entries at random, switch the two numbers.\n","\n","function to minimize on the states: one idea is to compute row/col/diag sums and multiply them. another: compute row/col/diag sums, count how many equal target. \n","compute differences between row/col/diag sums with the target\n","\n","\n","To solve magic square assignment:\n","1. states: assignment of 1,2,...n^2 into the n^2 boxes. there are 9! arrangements of numbers in the boxes.\n","in general: (n^2)! states.\n","2. transitions/moves: pick two entries at random, switch the two numbers.\n","3. function to minimize on the states: \n","  one idea is to compute row/col/diag sums and multiply them.\n","  another: compute row/col/diag sums, count how many equal target.\n","  compute differences between row/col/diag sums with the target"]},{"cell_type":"code","metadata":{"id":"TomH2pytcflE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620394129565,"user_tz":300,"elapsed":244,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"f7f364b1-21bf-4347-ee78-2e72bdb25837"},"source":["\n","sum = (1/2)*3*(3**2 + 1)#sum per row\n","P = int(sum)# sum of the numbers\n","p = 3 # number of numbers\n","\n","rand = random.choices(range(p), k = P)\n","state = [rand.count(i) for i in range(p)]\n","print(state)\n","sum = state[0] + state[1] + state[2]\n","sum\n","\n","#randomly generate numbers 1-9. and shuffle them. This creates the initial state.\n","#should later adjust for flexible square sizes.\n","random.choices(range(9), k = 9)\n","nums = list(range(9))\n","print(nums)\n","random.shuffle(nums)\n","nums\n","\n","#stick them into a matrix.\n","random.sample(range(1,10), 9)\n","matrix1 = np.reshape(nums, (3,3))\n","matrix1"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[3, 8, 4]\n","[0, 1, 2, 3, 4, 5, 6, 7, 8]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[6, 5, 1],\n","       [0, 7, 4],\n","       [8, 2, 3]])"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"qX_gJK0UYwbN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620394205240,"user_tz":300,"elapsed":353,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"32350526-4ad5-4cfa-890d-5ec241714c5f"},"source":["def doMove(currState, sig2):\n","  propState = proposal(currState)\n","  \n","  dFunc = distance(propState) - distance(currState)\n","  \n","  rho = math.exp(-dFunc/sig2)\n","  rand = random.random()    # random number between 0 and 1\n","  if rand < rho:\n","    return propState\n","  return currState\n","\n","def proposal(curr):\n","  choice = random.randint(0,1)\n","  if choice == 0:\n","    return curr\n","  else:\n","    propSquare = curr.copy()\n","    s = random.randint(0,1)\n","    if s == 0: # print(x, y, x1, x2)\n","      x = random.randint(0,2)\n","      y = random.randint(0,2)\n","      x1 = random.randint(0,2)\n","      y1 = random.randint(0,2)\n","\n","      temp = propState[x,y]\n","      propState[x,y] = propState[x1,y1]\n","      propState[x1,y1] = temp\n","      #propSquare = swappy(propSquare, x, y, x1, y1)\n","    else:\n","      x = random.randint(0,2)\n","      y = random.randint(0,2)\n","      propSquare = swappyrowcol(propSquare, x, y)#wait what is the differnce between these two?\n","    return propSquare\n","matrix1[1,1]"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E1oKJt5abDAd","executionInfo":{"status":"ok","timestamp":1620394220961,"user_tz":300,"elapsed":437,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"2106e3fa-aab2-40f7-f927-c69538e63fe4"},"source":["\n"],"execution_count":15,"outputs":[{"output_type":"stream","text":["[[6 5 1]\n"," [0 7 4]\n"," [8 2 3]]\n","[[6 5 1]\n"," [0 7 2]\n"," [8 4 3]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([6, 5, 1, 0, 7, 4, 8, 2, 3])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PN8BLHzASUCo","executionInfo":{"status":"ok","timestamp":1620399087234,"user_tz":300,"elapsed":297,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"d47955ef-cad8-4493-b353-c6e744e0e439"},"source":["\n","print(state)\n","print(proposeMove2(state))\n","print(proposeMove2(state))"],"execution_count":78,"outputs":[{"output_type":"stream","text":["[4 7 2 1 5 8 6 3 9]\n","[4 7 2 1 5 8 9 3 6]\n","[4 7 5 1 2 8 6 3 9]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZATZ72sgrijP","executionInfo":{"status":"ok","timestamp":1620399115147,"user_tz":300,"elapsed":1195,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["\n","# function to propose a move on the domain\n","m = 3\n","N = 120\n","\n","\n","def sums(input):#not a matrix\n","  matrix = np.reshape(input, (3,3))\n","  #setup:\n","  row0 = matrix[0,:,]\n","  row1 = matrix[1,:,]\n","  row2 = matrix[2,:,]\n","  col0 = matrix[:,0]\n","  col1 = matrix[:,1]\n","  col2 = matrix[:,2]\n","  #row sums:\n","  sumrow0 = row0[0] + row0[1] + row0[2]\n","  sumrow1 = row1[0] + row1[1] + row1[2]\n","  sumrow2 = row2[0] + row2[1] + row2[2]\n","  #diagonal sums:\n","  sumdiagright = matrix[0,0] + matrix[1,1] + matrix[2,2]#colon gives a slice\n","  sumdiagleft = matrix[0,2] + matrix[1,1] + matrix[2,0]\n","  #column sums:\n","  sumcol0 = col0[0] + col0[1] + col0[2]\n","  sumcol1 = col1[0] + col1[1] + col1[2]\n","  sumcol2 = col2[0] + col2[1] + col2[2]\n","  state = [sumrow0, sumrow1, sumrow2, sumdiagright, sumdiagleft, sumcol0, sumcol1, sumcol2]\n","  return state\n","#we don't want the product. we want distance from magic square.\n","\n","def proposeMove2(currState):\n","  currState = np.reshape(currState, (3,3))\n","  propState = currState.copy()  # make a copy of currState so that we don't modify currState\n","  #print(currState)\n","  i,j,n,k = random.choices(range(3),k=4)   # select two distinct indexes from 0, 1, 2, ... m-1\n","\n","  # increment propState[i] and decrement propState[j]\n","  temp = propState[i,j]\n","  propState[i,j] = propState[n,k]\n","  propState[n,k] = temp\n","  propState = np.reshape(propState, 9)\n","  return propState\n","#matrix1 = proposeMove2(matrix1) works\n","#proposeMove2(matrix1) works\n","\n","# function to make a move, deciding whether or not to accept the proposed move\n","def doMove2(currState, k):\n","  # propose a move\n","  propState = proposeMove2(currState)\n","  # compute the function value difference\n","  df = f2(propState) - f2(currState)#minimizing the max difference is best.\n","  # if df < 0, then make the move\n","  if df < 0:\n","    return propState\n","  # if df > 0, then make the move with probability rho\n","  rho = math.exp(-df/k)\n","  rand = random.random()   # random number between 0 and 1\n","  if rand < rho: # then move\n","    return propState\n","  # else: don't move\n","  return currState"],"execution_count":79,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KAbCSRc_RRm7","executionInfo":{"status":"ok","timestamp":1620399118659,"user_tz":300,"elapsed":583,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"66fa0caa-7178-46bc-8b46-04217a37731f"},"source":["\n","def f2(state):#okay this is not working for some reason....\n","  #return (-1)*(math.log( np.prod(state) + 1))#math.log gives natural log unless some otehr base is specified.\n","  #need to find distance from magic square.\n","  #need the 8 sums and take product + subtract from target.\n","  state = sums(state)#array of 15s\n","  #state = np.prod(state)\n","  ideal = np.array([15, 15, 15, 15, 15, 15, 15, 15])\n","  difference = np.abs((state - ideal))#subtract two values\n","  return np.max(difference)#####\n","print(state)\n","print(f2(state))"],"execution_count":80,"outputs":[{"output_type":"stream","text":["[4 7 2 1 5 8 6 3 9]\n","4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"7KkYP6zXswxH","executionInfo":{"status":"ok","timestamp":1620399122191,"user_tz":300,"elapsed":472,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"52d06719-893a-416f-ce94-8944764a5580"},"source":["# simulate the random walk\n","numSteps = 200\n","k = 1\n","decFac = 0.95  # decrease factor\n","\n","#randomly generate numbers 1-9. and shuffle them. This creates the initial state.\n","#should later adjust for flexible square sizes.\n","nums = random.sample(range(1,10), k = 9)#k is number of things to sample.\n","#nums = list(range())\n","print(nums)\n","#random.shuffle(nums)\n","state = nums#\n","\n","#rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","#state = [rand.count(i) for i in range(m)]  # a random starting state\n","\n","fvals = [f2(state)]#keep trac kof the values of f\n","print(\"starting state:\", state)\n","print(\"starting f2(state):\", f2(state))\n","#print(\"starting product:\", np.prod(state))\n","\n","for i in range(numSteps):\n","  # make a move\n","  state = doMove2(state,k)\n","  fvals.append( f2(state) )\n","\n","  # decrease k a little bit\n","  k = k*decFac\n","\n","print(\"ending state:\", state)\n","print(\"ending f2(state):\", f2(state))\n","print(\"ending product:\", np.prod(state))\n","print(\"k:\", k)\n","plt.plot(fvals)\n","plt.xlabel(\"step number\")\n","plt.ylabel(\"f2(state)\")\n","state = np.reshape(state, (3,3))\n","print(state)"],"execution_count":81,"outputs":[{"output_type":"stream","text":["[6, 8, 9, 3, 5, 7, 2, 1, 4]\n","starting state: [6, 8, 9, 3, 5, 7, 2, 1, 4]\n","starting f2(state): 8\n","ending state: [4 3 8 9 5 1 2 7 6]\n","ending f2(state): 0\n","ending product: 362880\n","k: 3.505266624882867e-05\n","[[4 3 8]\n"," [9 5 1]\n"," [2 7 6]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a6YKUNp5vO4K","executionInfo":{"status":"ok","timestamp":1620397646203,"user_tz":300,"elapsed":345,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"005b9867-bcab-4239-e7b5-e44cef3211ed"},"source":["#state\n","#stick them into a matrix.\n","#nums = random.sample(range(1,10), 9)\n","state = np.reshape(state, (3,3))\n","state"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[4, 2, 3],\n","       [6, 9, 1],\n","       [7, 8, 5]])"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"aUh9w0hivTrf"},"source":[""],"execution_count":null,"outputs":[]}]}