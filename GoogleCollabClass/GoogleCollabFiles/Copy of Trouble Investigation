{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Trouble Investigation","provenance":[{"file_id":"1YpOsOV_sG1fxj690yY8ztMjqpycMyJZF","timestamp":1617641438890}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"khrVQT7ht8Ze"},"source":["# Simulating the game *Trouble*\n","\n","*Math 242 Modern Computational Math*\n","\n","In the game *Trouble*, the goal is to move a bunch of markers from a starting point all the way to the ending point. Ignoring some subtleties of the game, the basic move is very simple:\n","\n","* You roll a standard 6-sided die.\n","* You move your marker the number of spaces equal to the value on the die.\n","* If you roll a six, then you roll and move again. You keep doing this as long as you roll sixes.\n","\n","For example, if you roll a 3, then you move 3 spaces. If you roll a 6 followed by a 3, then you move 6 + 3 = 9 spaces. If you roll a 6, another 6, and then a 3, then you move 6 + 6 + 3 = 15 spaces.``"]},{"cell_type":"markdown","metadata":{"id":"F9Lf4xrouaFc"},"source":["## Getting started\n","\n","Write some code that simulates a move in the game *Trouble*. Print the number of spaces moved. We will call the number of spaces the *length* of the move.\n","(numerical python: import numpy)"]},{"cell_type":"markdown","metadata":{"id":"--tbQgPS-L2S"},"source":["Yahtzee investigation: goal is to plot number of dice on x-axis, avg. num of rolls on y-axis. each data point is an average number of rolls for lots of simulations. \n","start with code that computes one data point. \n","\n","idea: write a function that computes the average number of rolls for a bunch of simulations involving n dice. \n","Then: use a loop or list comprehension to call the function for n from 2 to 20. averages = [computeAvgRolls(n) for n in range(2,21)]\n","\n","1:\n","def computeAvgRolls(n):\n","  sims = [rollYahtzee(n)    ]\n","  return sum(sims)/len(sims)\n","\n","2:\n","then use a loop or list comp\n","averages = [computeAvgRolls(n) for n in range(2,21)]\n","\n","\n","\n","\n","______________\n","Trouble invesigation: what is the average length of a roll?\n","roll a standard die, but if you get a 6, then roll again.\n"]},{"cell_type":"code","metadata":{"id":"Oi-4ANlQtzDQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618246461960,"user_tz":300,"elapsed":592,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"8e515942-670b-4c45-d214-2031f522c3ee"},"source":["import numpy\n","  #roll a dice. \n","import random\n","\n","\n","\n","#def rollDice():\n","#  rolls = [random.randint(1,6)]# for i in range(n)\n","#  return rolls\n","\n","#def movLength():\n","#  sum = []\n","#  result = [random.randint(1,6)]\n","#  if result == 6:\n","#    while result == 6:\n","#     result = [random.randint(1,6)]\n","#     sum.append(result)\n","#  else result != 6:\n","#    sum.append(result)\n","#  return sum(sum)#total length of roll\n","#########Class:\n","#loop until I don't get a six. First roll the dice then evaluate to see if I need to reroll the loop\n","\n","import matplotlib.pyplot as plt\n","\n","def doMove():\n","  roll = random.randint(1,6)\n","#print(roll)\n","  total = roll\n","\n","  while roll == 6:\n","    roll = random.randint(1,6)\n","  #print(roll)\n","    total += roll\n","  return total\n","#print(\"total is:\", total)\n","\n","#as list:\n","#roll = [0]\n","#roll = [random.randint(1,6)]\n","#print(roll[-1])\n","#total = roll\n","\n","#while roll[-1] == 6:\n"," # roll.append(random.randint(1,6))\n","#  print(roll[-1])\n","#  total += roll\n","#print(\"list total is:\", sum(roll))\n","lengths = [doMove() for _ in range(1000)]\n","print(*lengths)\n","sum(lengths)/len(lengths)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2 3 2 3 3 3 5 9 5 4 10 3 4 3 1 7 3 9 5 10 5 2 2 4 4 2 3 2 2 1 1 1 2 9 1 4 5 2 13 3 1 4 4 3 1 8 5 4 4 2 4 2 4 4 3 1 10 10 5 1 4 7 16 2 5 7 1 1 5 1 4 4 5 4 1 1 11 5 4 4 13 5 4 2 5 11 1 1 2 5 9 1 1 3 1 4 8 4 4 1 3 4 7 4 2 4 3 1 5 3 1 10 7 3 1 5 1 5 9 4 1 8 4 4 1 1 3 10 9 11 11 5 8 1 3 1 2 1 5 3 2 3 5 1 1 1 4 5 5 5 3 1 1 2 3 11 3 2 3 3 8 3 4 2 3 5 3 9 9 1 10 15 3 5 1 2 1 3 4 5 1 1 5 5 1 5 4 2 5 11 2 8 1 4 5 2 1 3 2 5 5 4 9 2 4 4 2 1 7 3 1 5 3 2 3 3 2 3 1 4 11 1 5 5 5 5 8 5 1 8 9 2 1 2 1 5 2 5 4 2 10 3 4 11 2 5 4 4 3 7 4 1 3 4 3 4 10 1 4 1 1 10 1 2 7 3 4 2 2 3 5 3 10 4 2 3 2 2 2 5 5 2 5 5 5 2 4 9 2 5 4 1 3 2 3 10 2 8 3 4 5 14 5 11 5 3 2 1 3 2 3 2 2 3 5 1 9 10 3 9 7 1 3 3 4 4 3 11 3 3 5 3 17 5 2 3 5 4 8 1 1 2 5 4 2 4 3 4 2 4 5 4 4 2 4 2 3 3 5 9 2 3 10 10 4 3 5 2 2 5 2 3 2 5 2 3 9 1 4 10 1 3 4 1 5 4 3 3 4 3 5 1 5 4 3 5 5 5 3 3 5 1 3 3 5 7 4 8 3 4 1 2 1 5 3 9 3 5 2 3 1 4 3 2 2 1 2 2 2 4 1 3 8 3 4 5 5 2 2 9 14 2 1 10 5 11 4 3 2 2 8 5 3 4 7 3 2 2 1 5 2 11 4 5 8 11 4 1 4 16 1 1 5 2 2 4 4 3 4 3 5 13 2 5 4 2 5 2 4 3 4 10 4 4 20 3 10 16 5 2 9 1 3 1 1 3 5 3 1 5 2 3 8 3 1 4 5 13 5 2 5 8 2 1 1 5 2 5 3 10 4 5 3 3 2 5 2 5 8 5 10 11 4 3 1 5 17 3 8 2 2 3 5 5 4 7 1 2 4 1 2 1 8 1 4 9 1 4 3 16 3 4 1 10 1 5 5 1 9 2 3 3 1 3 5 3 2 5 1 5 2 2 2 3 3 4 2 11 11 5 2 5 4 1 2 4 4 5 2 2 5 5 5 9 5 5 5 2 3 3 3 3 5 5 2 5 1 3 4 3 10 3 1 7 2 4 5 4 5 10 21 4 3 3 4 3 4 14 2 10 3 1 2 1 4 5 2 1 5 8 1 2 1 8 5 5 3 4 4 5 2 5 2 3 2 5 3 3 4 2 1 4 4 3 5 5 1 1 2 2 11 4 4 5 5 16 7 5 2 2 1 13 10 1 3 2 10 2 9 5 1 1 4 10 5 2 2 8 5 4 10 1 2 2 4 4 3 5 4 5 11 2 5 9 3 4 1 2 4 3 1 5 9 4 5 3 5 1 2 1 11 4 4 10 3 3 5 3 4 4 1 8 7 4 2 10 9 3 5 5 1 1 5 3 4 3 9 2 2 2 7 2 5 4 4 8 4 3 4 17 4 2 2 3 1 4 1 3 8 10 5 2 7 1 5 2 5 11 3 2 2 4 4 11 5 2 4 3 2 1 5 5 4 2 2 11 4 2 3 3 2 3 4 4 3 5 4 2 3 4 3 5 4 3 4 4 3 2 1 1 3 10 2 1 1 3 10 11 4 11 1 2 2 3 1 4 2 3 10 3 4 5 10 3 3 7 4 3 5 1 3 4 16 17 1 2 3 1 5 5 4 3 11 7 5 15 3 2 5 5 4 9 4 2 4 3 4 5 1 11 2 8 3 2 5 1 9 3 1 1 2 3 8 1 4 2 5 9 14 4 4 8 3 1 4 2 4 9 3 5 1 2 4 1 1 1 1 1 2 2 5 2 2 3 9 3 2 7 17 5 3 1 11 5 2 3 9 3 3 10 3 4 9 4 5 3 2 4 5 1 4 1 4 4 1 4 5 3 1 1 1 5 4 7 2 1 11 1 4 3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["4.24"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"11U2mYkIumDN"},"source":["## Question 1: Length of a move\n","\n","Simulate a few thousand moves and make a histogram of move lengths.\n","What is the *average* length of a move?"]},{"cell_type":"code","metadata":{"id":"NcOwPjGuAWWe","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1618241179890,"user_tz":300,"elapsed":1022,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"45e8f0b7-1c32-4012-9605-54e5d5fa3d54"},"source":["lengths = [doMove() for _ in range(5000)]\n","plt.hist(lengths);\n","#print(*lengths)\n","sum(lengths)/len(lengths)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4.178"]},"metadata":{"tags":[]},"execution_count":3},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"avrmZL4iz02n"},"source":["Average length is around 4.10 to 4.20"]},{"cell_type":"code","metadata":{"id":"xtOD2lb-z0oR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6RswMCBmuso9"},"source":["\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EW7LJhcdutMu"},"source":["## Question 2: Changing the roll-again value\n","\n","How does the average length of a move depend on the roll-again value? That is, if you change the rules so that you roll again after rolling a 1, what is the average length of a move? Do this for all six possible roll-again values."]},{"cell_type":"code","metadata":{"id":"hGPNOK3Su3aP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618241673684,"user_tz":300,"elapsed":267,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"06c5f606-1720-4490-be61-a437ec1ec8e0"},"source":["def doMove2(k):\n","  roll = random.randint(1,6)\n","#print(roll)\n","  total = roll\n","\n","  while roll == k:\n","    roll = random.randint(1,6)\n","  #print(roll)\n","    total += roll\n","  return total\n","\n","#I could use a while loop for this but I don't feel like it. it's not too inconvenient yet.\n","lengths = [doMove2(1) for _ in range(5000)]\n","print(\"1: \", sum(lengths)/len(lengths))\n","\n","lengths2 = [doMove2(2) for _ in range(5000)]\n","print(\"2: \", sum(lengths2)/len(lengths2))\n","\n","lengths3 = [doMove2(3) for _ in range(5000)]\n","print(\"3: \", sum(lengths3)/len(lengths3))\n","\n","lengths4 = [doMove2(4) for _ in range(5000)]\n","print(\"4: \", sum(lengths4)/len(lengths4))\n","\n","lengths5 = [doMove2(5) for _ in range(5000)]\n","print(\"5: \", sum(lengths5)/len(lengths5))\n","\n","lengths6 = [doMove2(6) for _ in range(5000)]\n","print(\"6: \", sum(lengths6)/len(lengths6))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1:  4.2008\n","2:  4.1602\n","3:  4.1726\n","4:  4.1404\n","5:  4.1528\n","6:  4.1448\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"e7QwhuV4zvHY"},"source":["The average roll length doesn't change for any starting value."]},{"cell_type":"markdown","metadata":{"id":"4KPl6Vitu3hP"},"source":["## Question 3: How does the roll-again value affect the chance of winning?\n","\n","Suppose you are playing against another person. You use the \"roll again on 6\" rule, but the other person uses the \"roll again on 1\" rule. You both roll your dice to complete a move. The winner is whoever has the larger move. (If the game is a tie, then play again until there is a winner.)\n","\n","Is this a fair game, in the sense that both players have an equal probability of winning? If not, what are the probabilities that each player wins? Who has the advantage? How can you explain this, given what you found for Question 2?"]},{"cell_type":"code","metadata":{"id":"d9OACRhbvXe2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618246649859,"user_tz":300,"elapsed":449,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"fab778ea-4ed3-4188-dc3b-2e22203c6eed"},"source":["#simulate a head-to-head game between two people\n","#def game(): simulate moves for both player. as long as their is a tie, do it again. once that isn't true, return winner.\n","\n","#simulate moves for bother players:\n","#moveA = \n","#moveB = \n","#while moveA == moveB:\n","  #moveA = \n","  #moveB = \n","#print(moveA, moveB)\n","#return the winner\n","\n","\n","def doMove3():\n","  roll = random.randint(1,6)\n","  total = roll\n","\n","  roll2 = random.randint(1,6)\n","  total2 = roll2\n","\n","  while roll == 1:#wait this seems wrong.\n","    roll = random.randint(1,6)\n","    total += roll\n","\n","  while roll2 == 6:\n","    roll2 = random.randint(1,6)\n","    total2 += roll2\n","\n","  if total > total2:\n","    #print(\"total wins\")\n","    return 1\n","  else:\n","    #print(\"total2 wins\")\n","    return 0\n","doMove()\n","#going to make true = total wins.\n","\n","result = [doMove3() for _ in range(10000)]\n","print(\"The proportion of times that player 1 wins is: \", sum(result)/len(result))\n","print(\"The proportion of times that palyer 2 wins is: \", 1 - sum(result)/len(result))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The proportion of times that player 1 wins is:  0.5238\n","The proportion of times that palyer 2 wins is:  0.47619999999999996\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"g0xwtuSJyYO3"},"source":["In problem 2, all the games had basically the same average roll length \n","regardless of which reroll value was used. It is not intuitive that one players wins more than the other (for different starting values)."]},{"cell_type":"markdown","metadata":{"id":"sFX5iptRpmz1"},"source":["## Optional Extensions\n","\n","If you have studied probability, can you compute the (exact) expected length of a move?\n","\n","If you have studied statistics, can you use a hypothesis test for proportions to justify whether the game in question 3 is fair or unfair?"]},{"cell_type":"code","metadata":{"id":"Os3dJZYbpu5W"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZK4dRCO7oBGc"},"source":["## Assignment\n","\n","Answer Questions 1-3 above. Submit a link to your solutions to the [Trouble Investigation](https://moodle-2020-21.stolaf.edu/mod/assign/view.php?id=95647) assignment on Moodle."]}]}