{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Percolation","provenance":[{"file_id":"1C1NG6Zb_WxtvpUZhc_oVHwej8Ko2yiE-","timestamp":1618852963792}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6MlG9b0_v3C4"},"source":["# Percolation\n","\n","Consider a $n \\times n$ grid of squares. Each square is either \"open\" with probability $p$ or \"closed\" with probability $1-p$. Imagine that water is poured on the top of the grid and flows through the open squares. What is the probability that the water will be able to flow from the top of the grid to the bottom through a path of open squares? "]},{"cell_type":"markdown","metadata":{"id":"l8vLRra9wuhm"},"source":["Import some necessary modules:"]},{"cell_type":"code","metadata":{"id":"vAu9ph83vwiu","executionInfo":{"status":"ok","timestamp":1618853217917,"user_tz":300,"elapsed":375,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":[" import random\n"," import math\n"," import numpy as np\n","\n"," import matplotlib.pyplot as plt\n"," from matplotlib#fuck. missed it."],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MHFcAHl9w2Z3"},"source":["Define variables:\n","\n","* `n`: the number of rows and columns in the grid\n","* `p`: probability that a square is \"open\""]},{"cell_type":"code","metadata":{"id":"DGu3cliWxIxe","executionInfo":{"status":"ok","timestamp":1618853208267,"user_tz":300,"elapsed":488,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["n = 10 #columns and rows in grid\n","p = 1/2 #probability that each square is open"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"35ha-LIAxdIL"},"source":["Define a data structure for the $n \\times n$ grid. You will need to decide how to represent \"open\" and \"closed\" squares in memory. Fill your grid so that each square is \"open\" with probability $p$."]},{"cell_type":"code","metadata":{"id":"wjZz9Upux1iX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618853295440,"user_tz":300,"elapsed":525,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"53fabe14-ee78-4850-deb7-26f94094d02a"},"source":["#convention: 1 means \"open\" and 0 means \"closed\"\n","np.random.rand(n,n) < p\n","grid = (np.random.rand(n,n) < p).astype(int)\n"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 1, 1, 1, 0, 0, 0, 1, 1],\n","       [1, 1, 0, 1, 1, 1, 0, 1, 1, 0],\n","       [1, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n","       [0, 1, 1, 1, 1, 0, 0, 1, 1, 0],\n","       [0, 0, 0, 1, 0, 0, 1, 0, 1, 0],\n","       [0, 1, 1, 1, 0, 0, 0, 1, 1, 0],\n","       [0, 1, 1, 1, 0, 1, 1, 1, 0, 1],\n","       [0, 0, 1, 1, 0, 1, 1, 0, 0, 1],\n","       [0, 0, 1, 1, 0, 1, 1, 1, 1, 0],\n","       [1, 1, 1, 0, 1, 0, 1, 1, 1, 0]])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"3OLHDm08LqGX"},"source":["mycolormap = ListedColormap([\"gray\", \"blue\"])\n","plt.imshow(grid, cmap=mycolormap)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hM2lGTTjx1pF"},"source":["Now we need to determine whether there exists a path of open cells from the top to the bottom of the grid.\n","\n","_How should we do this? What sort of algorithm would work best? Think about this and discuss with your classmates._"]},{"cell_type":"code","metadata":{"id":"qNnj4IDux3IY","executionInfo":{"status":"ok","timestamp":1618853199308,"user_tz":300,"elapsed":1086,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["#"],"execution_count":null,"outputs":[]}]}