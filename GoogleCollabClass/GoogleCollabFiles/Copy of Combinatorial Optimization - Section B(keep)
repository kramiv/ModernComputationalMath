{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Combinatorial Optimization - Section B(keep)","provenance":[{"file_id":"1dkMhfTNnrYEBWp3i3vlpU28fjgzfXNqh","timestamp":1620060516768},{"file_id":"1ngCAfhtwHpBq4_xSXrrULe0GXbl95WVF","timestamp":1619806787304}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"YGvP8ktrJoDT"},"source":["from last time: find 10 numbesr that sum to 100 whose product is maximum.\n","(from notebook: ten numbers was \"m\", sum 100 was \"n\")\n"]},{"cell_type":"markdown","metadata":{"id":"Xy6WmiUcM4x2"},"source":["# Combinatorial Optimization using Simulated Annealing\n","\n","Suppose you write the a number $N$ as the sum of $m$ non-negative integers. That is,\n","\n","$$ N = n_0 + n_1 + \\cdots + n_{m-1} $$\n","where each $n_i \\ge 0$. \n","\n","For example, if $m=4$, then $N=10$ can be written as $10 = 2 + 3 + 4 + 1$, or as $10 = 5 + 0 + 2 + 3$.\n","\n","**Here's a challenge:** Find the sum that maximizes the product function $g(n_0, n_1, \\dots, n_{m-1}) = n_0 n_1 \\cdots n_{m-1}$.\n","\n","Let's solve this problem using simulated annealing!"]},{"cell_type":"code","metadata":{"id":"_MsoZBLBMOgu","executionInfo":{"status":"ok","timestamp":1620335299103,"user_tz":300,"elapsed":293,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["import math\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0t1rku7oNaDE"},"source":["## The Domain\n","\n","The domain $\\Omega$ consists of all $m$-tuples (that is, ordered sequences of length $m$) of integers selected from $\\{0, 1, 2, \\ldots, N\\}$. Note that this is a discrete domain containing $N^m$ tuples. We will call each tuple a *state*. \n","\n","Here is one way of choosing a random state in $\\Omega$:"]},{"cell_type":"code","metadata":{"id":"mm5SajVVNnmN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620335301179,"user_tz":300,"elapsed":273,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"888fcbe9-aa8c-4c02-ca35-ac2f5218d1c8"},"source":["N = 120   # sum of the numbers\n","m = 8    # number of numbers\n","\n","rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","state = [rand.count(i) for i in range(m)]\n","print(state)\n","print(sum(state))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[17, 16, 14, 8, 22, 17, 9, 17]\n","120\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cZFpgbCTbSQT"},"source":["*Why does this code produce 10 non-negative integers that add up to 100?*"]},{"cell_type":"markdown","metadata":{"id":"2t1j5t6aO3-4"},"source":["## Proposing a Move\n","\n","Next, we need to decide how to propose a move from the current state.\n","\n","Here is one approach. If $(n_0, n_1, \\ldots, n_9)$ is the current state, then we can propose to transition to a new state as follows.\n","\n","* Randomly pick two indexes $i,j \\in \\{0, 1, \\ldots, 9\\}$.\n","* If $n_i > 0$, then decrease $n_i$ by one and increase $n_j$ by one.\n","* If $n_i = 0$, then do nothing.\n","\n","For example, suppose $(13, 6, 0, 16, 14, 9, 17, 6, 10, 9)$ is the current state. Randomly select, say, $i=1$ and $j=4$. In this case, we decrease $n_1$ by one and increase $n_4$ by one. The new state becomes $(13, 5, 0, 16, 15, 9, 17, 6, 10, 9)$.\n","\n","If we select $i=2$ and $j=3$, then the new state is the same as the current state, since we can't decrease $n_2 = 0$.\n","\n","Complete the `proposeMove` function in the following code cell."]},{"cell_type":"markdown","metadata":{"id":"LhM3_ZHzK4iD"},"source":["idea: we want to maximize teh product of the 10 numbers.\n","\n","maximize n0*n1*n2*...n9 is the same as \n","\n","minimizing -n0*n1*n2*...n9\n","\n","or: -ln(n0*n1*n2*...n9)\n","\n","df = change in fucntion value. \n","compute e^(-df/k)\n","\n","-ln(n0*n1*n2*...n9 + 1)   prevents taking log(0)   <-      we will minimize this function for f(n0, ..., n9)\n"]},{"cell_type":"code","metadata":{"id":"J3LSET8hbZBs","executionInfo":{"status":"ok","timestamp":1620335305028,"user_tz":300,"elapsed":279,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["# function to propose a move on the domain\n","def proposeMove(currState):\n","  propState = currState.copy()  # make a copy of currState so that we don't modify currState\n","\n","  i,j = random.sample(range(m),2)   # select two distinct indexes from 0, 1, 2, ... m-1\n","\n","  # ensure propState[i] < N and propState[j] > 0\n","  while propState[i] == N or propState[j] == 0:\n","    i,j = random.sample(range(m),2)\n","\n","  # increment propState[i] and decrement propState[j]\n","  propState[i] += 1\n","  propState[j] -= 1\n","\n","  return propState#, propState\n","#proposeMove(state)[0]#nice."],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cg2vmNXEFNAN","executionInfo":{"status":"ok","timestamp":1620335306693,"user_tz":300,"elapsed":295,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"66c2911a-1c31-4ec4-dc27-4cc2a5fd4927"},"source":["# testing\n","print(state)\n","print(proposeMove(state))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["[17, 16, 14, 8, 22, 17, 9, 17]\n","[17, 16, 14, 7, 22, 18, 9, 17]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0_77oB6kTlMs"},"source":["## Function to Minimize\n","\n","We want to maximize the product $g(n_0, n_1, \\dots, n_{m-1}) = n_0 n_1 \\cdots n_{m-1}$. However, our simulated annealing code from last time is designed to find the *minimum* of a function.\n","\n","We can multiply by $-1$ to convert the maximization problem to a minimization problem. That is, we could try to minimize:\n","$$h(n_0, n_1, \\dots, n_{m-1}) = -n_0 n_1 \\cdots n_{m-1} $$\n","\n","However, the product of $m$ integers might be quite large. Even the *difference* between two such products might be quite large.  Our simulated annealing algorithm requires us to compute $e^{-\\frac{dh}{k}}$, where $dh$ is the difference between the products for the proposed state and the current state. This exponential could be very large or very close to zero.\n","\n","Thus, it's advantageous to work with the *log* of the product. This will ensure that the exponentials are of a more manageable size and help avoid numerical problems in the comptuation.\n","In other words, we want to minimize the following function:\n","$$f(n_0, n_1, \\dots, n_{m-1}) = -\\log(n_0 n_1 \\cdots n_{m-1}) $$\n","\n","*Unfortunately, there is still one problem with this plan to minimize $f$. What could go wrong? How could you fix it?*"]},{"cell_type":"code","metadata":{"id":"MkS1sVV4bnDg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620335312178,"user_tz":300,"elapsed":273,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"2a4e330d-a79a-4ec0-be83-2c32a36cd854"},"source":["def f(state):#okay this is not working for some reason....\n","  return (-1)*(math.log( np.prod(state) + 1))#math.log gives natural log unless some otehr base is specified.\n","             #in my case, want to maximize the product of all rows = columns + diagonal. It is the maximal area of a square, isn't it? \n","print(state)\n","print(f(state))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[17, 16, 14, 8, 22, 17, 9, 17]\n","-21.27899465697171\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PAkqQ3-dYjnO"},"source":["## The Simulated Annealing Algorithm\n","\n","Remember simulated annealing strategy:\n","\n","1. Propose a move.\n","2. If the move is to a *more* optimal state, then make the move.\n","3. If the move is to a *less* optimal state, then make the move with probability $\\rho = e^{-\\frac{df}{k}}$, where $k$ is the \"temperature\" parameter.\n","4. Decrease $k$ a little bit, and return to step 1."]},{"cell_type":"markdown","metadata":{"id":"LImkkpACb235"},"source":["Here is our `doMove` function. (It's the same as the function we wrote in the last class!)"]},{"cell_type":"code","metadata":{"id":"9s-y6in6PHt7","executionInfo":{"status":"ok","timestamp":1620335314348,"user_tz":300,"elapsed":275,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}}},"source":["# function to make a move, deciding whether or not to accept the proposed move\n","def doMove(currState, k):\n","  # propose a move\n","  propState = proposeMove(currState)\n","\n","  # compute the function value difference\n","  df = f(propState) - f(currState)\n","\n","  # if df < 0, then make the move\n","  if df < 0:\n","    return propState\n","  \n","  # if df > 0, then make the move with probability rho\n","  rho = math.exp(-df/k)\n","  rand = random.random()   # random number between 0 and 1\n","  if rand < rho: # then move\n","    return propState\n","  # else: don't move\n","  return currState\n","\n","#okay: class code is working. optimal state is all 10 numbers to maximize sum. The more I bring numbers rogether, the bigger product is. \n","#example: 1*99 vs. 50*50\n","#ending state where all numbers are the same. 10 10 10 10 10 10 10 10 10 10 "],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gTnEU-kMZPJq"},"source":["Now we can simulate the random walk on the domain $\\Omega$ and search for an optimal state.\n","\n","this optimization problem has one local minimum/global minimum. This is why this works and the decfac can be so small. For otehr problems with more than one local mins, we use soemthing closer to 1."]},{"cell_type":"code","metadata":{"id":"v_-bhsa6PPRp","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620335319200,"user_tz":300,"elapsed":602,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"0be88478-98f5-46d4-fcf3-cc24d4b92c43"},"source":["# simulate the random walk\n","numSteps = 100\n","k = 1\n","decFac = 0.95  # decrease factor\n","\n","rand = random.choices(range(m), k=N)  # returns a list of N elements, each randomly selected from range(m)\n","state = [rand.count(i) for i in range(m)]  # a random starting state\n","\n","fvals = [f(state)]#keep trac kof the values of f\n","\n","print(\"starting state:\", state)\n","print(\"starting f(state):\", f(state))\n","print(\"starting product:\", np.prod(state))\n","\n","for i in range(numSteps):\n","  # make a move\n","  state = doMove(state, k)\n","  fvals.append( f(state) )\n","\n","  # decrease k a little bit\n","  k = k*decFac\n","\n","print(\"ending state:\", state)\n","print(\"ending f(state):\", f(state))\n","print(\"ending product:\", np.prod(state))\n","print(\"k:\", k)\n","plt.plot(fvals)\n","plt.xlabel(\"step number\")\n","plt.ylabel(\"f(state)\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["starting state: [22, 13, 16, 14, 14, 10, 15, 16]\n","starting f(state): -21.489919209090754\n","starting product: 2152550400\n","ending state: [17, 14, 16, 18, 12, 13, 14, 16]\n","ending f(state): -21.5967332133295\n","ending product: 2395201536\n","k: 0.005920529220333997\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'f(state)')"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NTVIMpmscW-t","executionInfo":{"status":"ok","timestamp":1620335395207,"user_tz":300,"elapsed":299,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"264e5092-a747-4d57-c9cb-c1626d745c39"},"source":["state\n","(17+14+16+18+12+13+14+16)/8\n","#the mean of this is 15."],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["15.0"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"rXQwHVzZcWpK"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"-9p1xrbiZqQ0"},"source":["## Investigation\n","\n","* Modify the code to store the value of the function $f$ for each visited state, and plot the values of $f$. Can you \"see\" how the states converge toward a state with minimum $f$ (and thus maximum product)?\n","\n","* Adjust the parameter values `numSteps`, `sig2`, and `decFac`. How do these parameters affect the performance of the algorithm?\n","\n","* Modify the code to count how many times the random walk proposes a move to a less optimal state, and how many times it make such a move. Make a list of the step numbers on which such moves are made. Do these moves get less common as $k$ decreases to zero?\n","\n","* What happens if you change $N$ and $m$?"]},{"cell_type":"code","metadata":{"id":"TomH2pytcflE"},"source":[""],"execution_count":null,"outputs":[]}]}