{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Yahtzee Investigation","provenance":[{"file_id":"1WinwMmgaTN0LxeF3pzSzDosgluHXPNou","timestamp":1617382512437}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"VjkU3eiVUHuY"},"source":["# Yahtzee Investigation\n","\n","Math 242\n","\n","Here is a Python implementation of our simplified Yahtzee game."]},{"cell_type":"code","metadata":{"id":"wKD9f_hREk9_"},"source":["import random\n","\n","# function to simulate rolling n dice\n","def rollDice(n):\n","  rolls = [random.randint(1,6) for i in range (n)]\n","  return rolls\n","\n","# function to simulate a game of Yahtzee and return the number of rolls\n","def rollYahtzee():\n","  # define some variables that we will need\n","  numRolls = 0\n","  matchedRolls = []\n","  currRolls = []\n","  \n","  # roll until all five dice show the same value\n","  while(len(matchedRolls) < 5):\n","    # roll the dice\n","    currRolls = matchedRolls + rollDice(5 - len(matchedRolls))\n","    numRolls += 1\n","    \n","    print(currRolls) # printing the current rolls will help us verify that the function works properly\n","\n","    # count the number of matches\n","    counts = [currRolls.count(i) for i in range(1,7)]\n","    maxCount = max(counts)    # number of times the most common roll appears\n","    maxVal = counts.index(maxCount) + 1    # number shown on the most common roll\n","    \n","    # keep only matched dice\n","    matchedRolls = [maxVal for i in range(maxCount)]\n","    \n","  # now we have a Yahtzee\n","  return numRolls"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aR_6FCUbwed-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617932999993,"user_tz":300,"elapsed":780,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"58fd7d8f-6530-4d86-824e-7b74f24c776f"},"source":["rollYahtzee()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[5, 5, 2, 5, 4]\n","[5, 5, 5, 4, 6]\n","[5, 5, 5, 2, 3]\n","[5, 5, 5, 1, 4]\n","[5, 5, 5, 5, 2]\n","[5, 5, 5, 5, 3]\n","[5, 5, 5, 5, 6]\n","[5, 5, 5, 5, 3]\n","[5, 5, 5, 5, 2]\n","[5, 5, 5, 5, 2]\n","[5, 5, 5, 5, 2]\n","[5, 5, 5, 5, 5]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["12"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"ItANMvgzlB4T"},"source":["# Assignment\n","\n","Use simulation and create plots to answer each of the following questions. Submit a link to the notebook containing your solutions to the [Yahtzee Investigation](https://moodle-2020-21.stolaf.edu/mod/assign/view.php?id=77322) assignment on Moodle."]},{"cell_type":"markdown","metadata":{"id":"vYsqbWcbUXSG"},"source":["## 1. What is the distribution of the number of rolls? \n","\n","Simulate thousands of games, and make a histogram of the numbers of rolls."]},{"cell_type":"code","metadata":{"id":"FtnvTgeInQ1x","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1617980958930,"user_tz":300,"elapsed":733,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"7ae401bb-daef-42e5-838f-3e1b9bb5821a"},"source":["\n","import matplotlib.pyplot as plt#patplotlib\n","games = [rollYahtzee() for i in range(10)];\n","mean = sum(games)/len(games);\n","mean\n","plt.hist(mean);\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[5, 2, 4, 3, 6]\n","[2, 2, 5, 4, 4]\n","[2, 2, 2, 5, 1]\n","[2, 2, 2, 6, 4]\n","[2, 2, 2, 4, 3]\n","[2, 2, 2, 3, 6]\n","[2, 2, 2, 4, 2]\n","[2, 2, 2, 2, 3]\n","[2, 2, 2, 2, 5]\n","[2, 2, 2, 2, 2]\n","[6, 2, 6, 2, 2]\n","[2, 2, 2, 3, 5]\n","[2, 2, 2, 6, 3]\n","[2, 2, 2, 4, 2]\n","[2, 2, 2, 2, 3]\n","[2, 2, 2, 2, 6]\n","[2, 2, 2, 2, 6]\n","[2, 2, 2, 2, 5]\n","[2, 2, 2, 2, 4]\n","[2, 2, 2, 2, 5]\n","[2, 2, 2, 2, 4]\n","[2, 2, 2, 2, 6]\n","[2, 2, 2, 2, 6]\n","[2, 2, 2, 2, 2]\n","[3, 1, 5, 6, 4]\n","[1, 4, 5, 4, 3]\n","[4, 4, 6, 3, 2]\n","[4, 4, 1, 5, 3]\n","[4, 4, 6, 4, 5]\n","[4, 4, 4, 1, 4]\n","[4, 4, 4, 4, 6]\n","[4, 4, 4, 4, 4]\n","[3, 4, 2, 6, 2]\n","[2, 2, 3, 3, 3]\n","[3, 3, 3, 1, 4]\n","[3, 3, 3, 2, 2]\n","[3, 3, 3, 2, 1]\n","[3, 3, 3, 5, 6]\n","[3, 3, 3, 1, 3]\n","[3, 3, 3, 3, 3]\n","[3, 2, 1, 5, 3]\n","[3, 3, 4, 4, 6]\n","[3, 3, 2, 6, 4]\n","[3, 3, 3, 4, 6]\n","[3, 3, 3, 1, 1]\n","[3, 3, 3, 4, 3]\n","[3, 3, 3, 3, 6]\n","[3, 3, 3, 3, 4]\n","[3, 3, 3, 3, 3]\n","[5, 6, 5, 1, 5]\n","[5, 5, 5, 3, 4]\n","[5, 5, 5, 6, 5]\n","[5, 5, 5, 5, 3]\n","[5, 5, 5, 5, 6]\n","[5, 5, 5, 5, 2]\n","[5, 5, 5, 5, 4]\n","[5, 5, 5, 5, 6]\n","[5, 5, 5, 5, 4]\n","[5, 5, 5, 5, 6]\n","[5, 5, 5, 5, 1]\n","[5, 5, 5, 5, 4]\n","[5, 5, 5, 5, 4]\n","[5, 5, 5, 5, 4]\n","[5, 5, 5, 5, 5]\n","[2, 4, 4, 2, 6]\n","[2, 2, 2, 4, 3]\n","[2, 2, 2, 4, 5]\n","[2, 2, 2, 5, 4]\n","[2, 2, 2, 3, 2]\n","[2, 2, 2, 2, 3]\n","[2, 2, 2, 2, 5]\n","[2, 2, 2, 2, 5]\n","[2, 2, 2, 2, 2]\n","[2, 5, 1, 5, 4]\n","[5, 5, 5, 1, 1]\n","[5, 5, 5, 4, 5]\n","[5, 5, 5, 5, 6]\n","[5, 5, 5, 5, 2]\n","[5, 5, 5, 5, 6]\n","[5, 5, 5, 5, 1]\n","[5, 5, 5, 5, 3]\n","[5, 5, 5, 5, 5]\n","[6, 5, 1, 2, 1]\n","[1, 1, 4, 3, 2]\n","[1, 1, 3, 5, 4]\n","[1, 1, 3, 1, 2]\n","[1, 1, 1, 1, 6]\n","[1, 1, 1, 1, 2]\n","[1, 1, 1, 1, 6]\n","[1, 1, 1, 1, 5]\n","[1, 1, 1, 1, 4]\n","[1, 1, 1, 1, 6]\n","[1, 1, 1, 1, 2]\n","[1, 1, 1, 1, 6]\n","[1, 1, 1, 1, 5]\n","[1, 1, 1, 1, 6]\n","[1, 1, 1, 1, 3]\n","[1, 1, 1, 1, 4]\n","[1, 1, 1, 1, 6]\n","[1, 1, 1, 1, 5]\n","[1, 1, 1, 1, 1]\n","[3, 4, 6, 2, 4]\n","[4, 4, 1, 3, 5]\n","[4, 4, 1, 3, 5]\n","[4, 4, 3, 6, 6]\n","[4, 4, 1, 6, 1]\n","[1, 1, 1, 3, 6]\n","[1, 1, 1, 4, 2]\n","[1, 1, 1, 3, 4]\n","[1, 1, 1, 3, 6]\n","[1, 1, 1, 6, 4]\n","[1, 1, 1, 5, 4]\n","[1, 1, 1, 2, 5]\n","[1, 1, 1, 2, 6]\n","[1, 1, 1, 4, 2]\n","[1, 1, 1, 2, 4]\n","[1, 1, 1, 3, 4]\n","[1, 1, 1, 6, 3]\n","[1, 1, 1, 5, 3]\n","[1, 1, 1, 1, 5]\n","[1, 1, 1, 1, 1]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"YCQh6mLnXH6c"},"source":["##2. What happens if you change the game to use $n$ dice? \n","\n","Make a copy of the simulation code and modify it to use $n$ dice instead of $5$ dice. Simulate $1000$ games for each integer $n$ from $2$ to $20$. Make a plot showing how the average number of rolls depends on $n$. (The horizontal axis should be $n$, and the vertical axis should be the average number of rolls for each $n$.)\n"]},{"cell_type":"code","metadata":{"id":"uN-U3S2bnRcG","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1617983046070,"user_tz":300,"elapsed":4567,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"76e2d7c2-92e6-4eb5-f69b-b053bba82bb3"},"source":["def rollDice(n):\n","  rolls = [random.randint(1,6) for i in range (n)]\n","  return rolls\n","\n","# function to simulate a game of Yahtzee and return the number of rolls\n","def rollYahtzeenum(n):\n","  # define some variables that we will need\n","  numRolls = 0\n","  matchedRolls = []\n","  currRolls = []\n","  # roll until all five dice show the same value\n","  while(len(matchedRolls) < n):\n","    # roll the dice\n","    currRolls = matchedRolls + rollDice(n - len(matchedRolls))\n","    numRolls += 1\n","    #print(currRolls) # printing the current rolls will help us verify that the function works properly\n","    # count the number of matches\n","    counts = [currRolls.count(i) for i in range(1,(n+1))]\n","    maxCount = max(counts)    # number of times the most common roll appears\n","    maxVal = counts.index(maxCount) + 1    # number shown on the most common roll\n","    # keep only matched dice\n","    matchedRolls = [maxVal for i in range(maxCount)]\n","  # now we have a Yahtzee\n","  return numRolls\n","\n","#get average number of rolls for each number individually \n","\n","#rollYahtzeenum(2)#test. works\n","#listmeans = []\n","\n","#games2 = [rollYahtzeenum(2) for i in range (1000)];\n","#mean2 = sum(games2)/len(games2);\n","#listmeans.append(mean2)\n","\n","#games3 = [rollYahtzeenum(3) for i in range (1000)];\n","#mean3 = sum(games3)/len(games3);\n","#listmeans.append(mean3)\n","\n","count = 2\n","xvals = []\n","listmeans = []\n","while count < 22:\n","  games = [rollYahtzeenum(count) for _ in range(1000)];\n","  mean = sum(games)/len(games)\n","  listmeans.append(mean)\n","  xvals.append(count)\n","  count = count + 1\n","print(xvals)\n","\n","plt.hist(listmeans);\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAQnklEQVR4nO3db4xldX3H8fdHWFGrhepOlS67jin4QImAThGrTRFqg0rYJmKCqQoWswmRCobUgE0w8Ei00UYxko0QEAlikdpVIEoVqz5gdXa7rMBi3Vgqi1gWUJCo6NpvH9yjGYe5e8/M3tm78/P9Sm72/PnNPR/HuR/OnDl/UlVIkla+p006gCRpPCx0SWqEhS5JjbDQJakRFrokNeLgSW149erVNT09PanNS9KKtGXLloeramqhdRMr9OnpaWZnZye1eUlakZL8z7B1HnKRpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5Jjehd6EkOSvKfSb64wLpDktyQZGeSzUmmxxlSkjTaYvbQzwN2DFl3NvDjqjoS+Ahw2b4GkyQtTq9CT3IE8Ebgk0OGrAeu6aZvBE5Okn2PJ0nqq++Vov8MvBd4zpD1a4D7AapqT5LHgOcBD88dlGQDsAFg3bp1S8kraRlMX3jzxLZ93wfeOJHttvi/eeQeepJTgYeqasu+bqyqNlbVTFXNTE0teCsCSdIS9Tnk8mrgtCT3AZ8BTkry6XljHgDWAiQ5GDgUeGSMOSVJI4ws9Kq6qKqOqKpp4Azgq1X11nnDNgFndtOnd2N8WKkk7UdLvttikkuB2araBFwJXJtkJ/Aog+KXJO1Hiyr0qvoa8LVu+uI5y38BvHmcwSRJi+OVopLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRvR5SPQzknwryZ1J7k5yyQJjzkqyO8m27vXO5YkrSRqmzxOLngROqqonkqwCvpnk1qq6Y964G6rq3PFHlCT1MbLQu4c9P9HNrupePgBakg4wvY6hJzkoyTbgIeC2qtq8wLA3Jdme5MYka8eaUpI0Uq9Cr6pfV9WxwBHA8UmOnjfkC8B0Vb0MuA24ZqH3SbIhyWyS2d27d+9LbknSPIs6y6WqfgLcDpwyb/kjVfVkN/tJ4BVDvn5jVc1U1czU1NRS8kqShuhzlstUksO66WcCrwPunTfm8DmzpwE7xhlSkjRan7NcDgeuSXIQg/8AfLaqvpjkUmC2qjYB705yGrAHeBQ4a7kCS5IW1ucsl+3AcQssv3jO9EXAReONJklaDK8UlaRGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEb0eaboM5J8K8mdSe5OcskCYw5JckOSnUk2J5lejrCSpOH67KE/CZxUVccAxwKnJDlh3pizgR9X1ZHAR4DLxhtTkjTKyEKvgSe62VXdq+YNWw9c003fCJycJGNLKUkaaeRDogGSHARsAY4EPl5Vm+cNWQPcD1BVe5I8BjwPeHje+2wANgCsW7du35JLDZq+8OZJR9AK1uuPolX166o6FjgCOD7J0UvZWFVtrKqZqpqZmppayltIkoZY1FkuVfUT4HbglHmrHgDWAiQ5GDgUeGQcASVJ/fQ5y2UqyWHd9DOB1wH3zhu2CTizmz4d+GpVzT/OLklaRn2OoR8OXNMdR38a8Nmq+mKSS4HZqtoEXAlcm2Qn8ChwxrIlliQtaGShV9V24LgFll88Z/oXwJvHG02StBheKSpJjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmN6PNM0bVJbk9yT5K7k5y3wJgTkzyWZFv3unih95IkLZ8+zxTdA1xQVVuTPAfYkuS2qrpn3rhvVNWp448oSepj5B56VT1YVVu76Z8CO4A1yx1MkrQ4izqGnmSawQOjNy+w+lVJ7kxya5KXDvn6DUlmk8zu3r170WElScP1LvQkzwY+B5xfVY/PW70VeGFVHQN8DPj8Qu9RVRuraqaqZqamppaaWZK0gF6FnmQVgzK/rqpumr++qh6vqie66VuAVUlWjzWpJGmv+pzlEuBKYEdVfXjImBd040hyfPe+j4wzqCRp7/qc5fJq4G3Ad5Js65a9D1gHUFVXAKcD5yTZA/wcOKOqahnySpKGGFnoVfVNICPGXA5cPq5QkqTF80pRSWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJakSfZ4quTXJ7knuS3J3kvAXGJMlHk+xMsj3Jy5cnriRpmD7PFN0DXFBVW5M8B9iS5LaqumfOmNcDR3WvVwKf6P6VJO0nI/fQq+rBqtraTf8U2AGsmTdsPfCpGrgDOCzJ4WNPK0kaqs8e+m8lmQaOAzbPW7UGuH/O/K5u2YPzvn4DsAFg3bp1i0uq3zvTF948sW3f94E3Tmzbv28m+f9za3r/UTTJs4HPAedX1eNL2VhVbayqmaqamZqaWspbSJKG6FXoSVYxKPPrquqmBYY8AKydM39Et0yStJ/0OcslwJXAjqr68JBhm4C3d2e7nAA8VlUPDhkrSVoGfY6hvxp4G/CdJNu6Ze8D1gFU1RXALcAbgJ3Az4B3jD+qJGlvRhZ6VX0TyIgxBbxrXKEkSYvnlaKS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUiD7PFL0qyUNJ7hqy/sQkjyXZ1r0uHn9MSdIofZ4pejVwOfCpvYz5RlWdOpZEkqQlGbmHXlVfBx7dD1kkSftgXMfQX5XkziS3JnnpsEFJNiSZTTK7e/fuMW1akgTjKfStwAur6hjgY8Dnhw2sqo1VNVNVM1NTU2PYtCTpN/a50Kvq8ap6opu+BViVZPU+J5MkLco+F3qSFyRJN318956P7Ov7SpIWZ+RZLkmuB04EVifZBbwfWAVQVVcApwPnJNkD/Bw4o6pq2RJLkhY0stCr6i0j1l/O4LRGSdIEeaWoJDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1wkKXpEZY6JLUCAtdkhphoUtSIyx0SWqEhS5JjbDQJakRFrokNWJkoSe5KslDSe4asj5JPppkZ5LtSV4+/piSpFH67KFfDZyyl/WvB47qXhuAT+x7LEnSYo0s9Kr6OvDoXoasBz5VA3cAhyU5fFwBJUn9jHxIdA9rgPvnzO/qlj04f2CSDQz24lm3bt2SNzh94c1L/lqpD3/GtBLt1z+KVtXGqpqpqpmpqan9uWlJat44Cv0BYO2c+SO6ZZKk/Wgchb4JeHt3tssJwGNV9ZTDLZKk5TXyGHqS64ETgdVJdgHvB1YBVNUVwC3AG4CdwM+AdyxXWEnScCMLvareMmJ9Ae8aWyJJ0pJ4pagkNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJaoSFLkmNsNAlqREWuiQ1olehJzklyXeT7Exy4QLrz0qyO8m27vXO8UeVJO1Nn2eKHgR8HHgdsAv4dpJNVXXPvKE3VNW5y5BRktRDnz3044GdVfX9qvol8Blg/fLGkiQtVp9CXwPcP2d+V7dsvjcl2Z7kxiRrF3qjJBuSzCaZ3b179xLiSpKGGdcfRb8ATFfVy4DbgGsWGlRVG6tqpqpmpqamxrRpSRL0K/QHgLl73Ed0y36rqh6pqie72U8CrxhPPElSX30K/dvAUUlelOTpwBnAprkDkhw+Z/Y0YMf4IkqS+hh5lktV7UlyLvAl4CDgqqq6O8mlwGxVbQLeneQ0YA/wKHDWMmaWJC1gZKEDVNUtwC3zll08Z/oi4KLxRpMkLYZXikpSIyx0SWqEhS5JjbDQJakRFrokNcJCl6RGWOiS1AgLXZIaYaFLUiMsdElqhIUuSY2w0CWpERa6JDXCQpekRljoktQIC12SGmGhS1IjehV6klOSfDfJziQXLrD+kCQ3dOs3J5ked1BJ0t6NLPQkBwEfB14PvAR4S5KXzBt2NvDjqjoS+Ahw2biDSpL2rs8e+vHAzqr6flX9EvgMsH7emPXANd30jcDJSTK+mJKkUfo8JHoNcP+c+V3AK4eNqao9SR4Dngc8PHdQkg3Ahm72iSTfXUro/WQ18/KvECs1N5h9ElZqbljB2XPZPmV/4bAVfQp9bKpqI7Bxf25zqZLMVtXMpHMs1krNDWafhJWaG8y+kD6HXB4A1s6ZP6JbtuCYJAcDhwKPjCOgJKmfPoX+beCoJC9K8nTgDGDTvDGbgDO76dOBr1ZVjS+mJGmUkYdcumPi5wJfAg4Crqqqu5NcCsxW1SbgSuDaJDuBRxmU/kq3Ig4NLWCl5gazT8JKzQ1mf4q4Iy1JbfBKUUlqhIUuSY2w0OdJ8p4kdye5K8n1SZ4x6UzDJLkqyUNJ7pqz7LlJbkvyve7fP5pkxmGGZP9QknuTbE/yr0kOm2TGYRbKPmfdBUkqyepJZNubYbmT/H33fb87yQcnlW9vhvy8HJvkjiTbkswmOX6SGReSZG2S25Pc031/z+uWL8vn1EKfI8ka4N3ATFUdzeCPwAfyH3ivBk6Zt+xC4CtVdRTwlW7+QHQ1T81+G3B0Vb0M+C/gov0dqqereWp2kqwF/hr4wf4O1NPVzMud5LUMrvQ+pqpeCvzTBHL1cTVP/Z5/ELikqo4FLu7mDzR7gAuq6iXACcC7ulunLMvn1EJ/qoOBZ3bn0z8L+OGE8wxVVV9ncFbRXHNvw3AN8Df7NVRPC2Wvqi9X1Z5u9g4G1zwccIZ832FwH6P3AgfkmQZDcp8DfKCqnuzGPLTfg/UwJHsBf9hNH8oB+Fmtqgerams3/VNgB4Mr65flc2qhz1FVDzDYQ/kB8CDwWFV9ebKpFu35VfVgN/0j4PmTDLMP/g64ddIh+kqyHnigqu6cdJZFejHwF91dUv8jyZ9NOtAinA98KMn9DD63B+pvdAB0d6E9DtjMMn1OLfQ5uuNY64EXAX8C/EGSt0421dJ1F3cdkHuLe5PkHxn8qnrdpLP0keRZwPsY/Nq/0hwMPJfB4YB/AD67gm6sdw7wnqpaC7yHwfUwB6QkzwY+B5xfVY/PXTfOz6mF/rv+CvjvqtpdVb8CbgL+fMKZFut/kxwO0P17QP4KPUySs4BTgb9dQVcb/ymDnYA7k9zH4FDR1iQvmGiqfnYBN9XAt4D/Y3DTq5XgTAafUYB/YXBn2ANOklUMyvy6qvpN3mX5nFrov+sHwAlJntXtpZzM4JjXSjL3NgxnAv82wSyLkuQUBsegT6uqn006T19V9Z2q+uOqmq6qaQYl+fKq+tGEo/XxeeC1AEleDDydlXMHwx8Cf9lNnwR8b4JZFtT1yJXAjqr68JxVy/M5rSpfc17AJcC9wF3AtcAhk860l6zXMzjW/ysGJXI2g9sWf4XBD/e/A8+ddM5FZN/J4DbM27rXFZPO2Tf7vPX3AasnnbPn9/zpwKe7n/etwEmTzrmI7K8BtgB3Mjgu/YpJ51wg92sYHE7ZPufn+g3L9Tn10n9JaoSHXCSpERa6JDXCQpekRljoktQIC12SGmGhS1IjLHRJasT/A3w+NPzECOFWAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"MFnziky1XKC_"},"source":["## 3. What happens if you change the game to use $k$-sided dice? \n","\n","Make another copy of the simulation code and modify it to use $k$-sided dice instead of $6$-sided dice. Then simulate $1000$ games for each integer $k$ from $2$ to $20$. Make a plot showing how the average number of rolls depends on $k$. (The horizontal axis should be $k$, and the vertical axis should be the average number of rolls for each $k$.)"]},{"cell_type":"code","metadata":{"id":"4C5bqX97nSZ9","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1617984641235,"user_tz":300,"elapsed":3808,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"a4da5680-8a8f-473d-c171-05b386d6069a"},"source":["def rollDice(n,k):\n","  rolls = [random.randint(1,k) for i in range (n)]\n","  return rolls\n","\n","# function to simulate a game of Yahtzee and return the number of rolls\n","def rollYahtzeek(k):\n","  # define some variables that we will need\n","  numRolls = 0\n","  matchedRolls = []\n","  currRolls = []\n","  \n","  # roll until all five dice show the same value\n","  while(len(matchedRolls) < 5):\n","    # roll the dice\n","    currRolls = matchedRolls + rollDice(5 - len(matchedRolls),k)\n","    numRolls += 1\n","    \n","    #print(currRolls) # printing the current rolls will help us verify that the function works properly\n","\n","    # count the number of matches\n","    counts = [currRolls.count(i) for i in range(1,k)]\n","    maxCount = max(counts)    # number of times the most common roll appears\n","    maxVal = counts.index(maxCount) + 1    # number shown on the most common roll\n","    \n","    # keep only matched dice\n","    matchedRolls = [maxVal for i in range(maxCount)]\n","    \n","  # now we have a Yahtzee\n","  return numRolls\n","\n","rollYahtzeek(3)\n","\n","count = 2\n","xvals = []\n","listmeans = []\n","k = 10\n","while count < 22:\n","  games = [rollYahtzeek(k) for _ in range(1000)];\n","  mean = sum(games)/len(games)\n","  listmeans.append(mean)\n","  xvals.append(count)\n","  count = count + 1\n","print(xvals)\n","\n","plt.hist(listmeans);\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"LQR0ZWImmJuu"},"source":["## Optional further investigation:\n","\n","How do your answers to the questions above change if you count *individual die-rolls* instead of rolls of multiple dice together? For example, if we roll three dice simulateously, this is counted as \"one roll\" in the code above. What if we instead count it as three rolls?\n","\n","Or, think of your own questions to investigate!"]}]}