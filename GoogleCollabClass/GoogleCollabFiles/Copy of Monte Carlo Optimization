{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Monte Carlo Optimization","provenance":[{"file_id":"1Em9jOxj9z5pQ0gNR78xV4JLIbX_7Kizw","timestamp":1619629597764}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"lBYkglVWcsZk"},"source":["warm-up: consider e^(-x/k) for x > 0. How does the shape of the graph of this depend on k? K > 0\n","\n","Problem:\n","suppose we have a fucntion f: omega -> |R. \n","The domain omega is high-dimensional and very large, and f is complicated. \n","we want to find x in omega that minimizes f(x).\n","We can't draw a graph of f or use calculus (normally would take derivative and see where slope is 0).\n","How can we find a minimum value? Even an approximate minimum.\n","\n","Idea: Use a random walk on omega. Start at a random location.\n","The random walk, at every time step, will propose a different move to a location nearby in the domain. If the move has a smaller value of f, it will go there. \n","If the proposed move goes to a smaller value of f, then the move is made. \n","If the proposed move goes to a larger value of f, then the walk might or might not make the move. \n","The longer this process proceeds, the less likely the walk is to move to a larger value of f. \n","\n","This process is caleld simulated annealing. \n","It's a Markov Chain monte Carlo method (MCMC).\n","MCMC is when you ahve a bunch of states and go from one state to the next. \n","(linear algebra: vector matrices, etc. )\n"]},{"cell_type":"markdown","metadata":{"id":"lIKTlKwKBeGV"},"source":["# Monte Carlo Optimization\n","\n","Monte Carlo optimization relies on adaptive random sampling to find the (approximately) minimum or maximum value of a function $f : \\Omega \\to \\mathbb{R}$. Typically such methods are used when the domain $\\Omega$ is high-dimensional and possibly very large. In such a situation, it is likely impossible to graph $f$ or to use calculus to find extreme values of $f$.\n","\n","We will explore an optimization method called *simulated annealing*. The name comes from the *annealing* in metallurgy: the process of heating and cooling a metal to modify its properties."]},{"cell_type":"markdown","metadata":{"id":"xHLXefzPCsUt"},"source":["## A simple example\n","\n","As a first example, let the domain be $\\Omega = \\{0, 1, 2, \\ldots, 100\\}$, and let the function be\n","\n","$$f(x) = \\frac{1}{4}\\sin\\left(\\frac{x}{2}\\right) + \\frac{(x-40)^2}{500} + 2.$$\n","\n","We want to find $x \\in \\Omega$ where $f$ is minimized.\n"]},{"cell_type":"code","metadata":{"id":"PZ5qzPXQBIkm"},"source":["import math\n","import random\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# domain: {0, 1, ..., 100}\n","domain = list(range(101))\n","\n","# function to minimize\n","def f(x):\n","  return math.sin(x/2)/4 + (x-40)**2/500 + 2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FjbXoB73D8gn"},"source":["We will plot $f(x)$ to get some intution about where the minimum value occurs. Remember that in most situations where simulated annealing is used, we *can't* plot $f$."]},{"cell_type":"code","metadata":{"id":"zAFCygi4ENae","colab":{"base_uri":"https://localhost:8080/","height":296},"executionInfo":{"status":"ok","timestamp":1619630515102,"user_tz":300,"elapsed":834,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"2aff01e5-4a06-4e43-81f0-07905b028c32"},"source":["fvals = [f(x) for x in domain]\n","plt.plot(domain, fvals, 'g.')\n","plt.xlabel(\"x\")\n","plt.ylabel(\"y\")\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'y')"]},"metadata":{"tags":[]},"execution_count":3},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"A5Jr6OghERgq"},"source":["Now we will create a random walk on the domain $\\Omega$. Our goal is to make the random walk explore the domain and gravitate toward the values $x$ where $f(x)$ is minimized."]},{"cell_type":"code","metadata":{"id":"Lsr4_8hxEesu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619630847548,"user_tz":300,"elapsed":390,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"75d362de-0b31-491f-9d38-27639c48b4eb"},"source":["#fucntion to propose a move on the domain (not continuous)\n","def proposeMove(currLoc):\n","  move = random.choice([-1,1])\n","  proposal = currLoc + move \n","\n","  if proposal < 0:#don't run off the end\n","    proposal = 0\n","  if proposal > 100:\n","    proposal = 100\n","  return proposal\n","\n","proposeMove(00)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"rhbZ-IT5Ee6Q"},"source":["#function to make move deciding whether or not to accept the proposed move:\n","def doMove(currLoc,k):\n","  prop = proposeMove(currLoc)\n","\n","  #compute the function value difference \n","  df = f(prop) - f(currLoc)\n","\n","  #if df < 0, then make the move\n","  if df < 0:\n","    return prop\n","  \n","  #if df > 0, then maybe move\n","  #use exponential function e^(-x/k) to use probability. it is between 0 and 1. so:\n","  rho = math.exp(-df/k)#make the move based on probability rho.\n","  rand = random.random()#random number between 0 and 1 that will decide if it moves using rho. compare it to rho.\n","  if rand < rho:#move \n","    return prop\n","  #else don't move\n","  else:#or no else statement and ust have return currLoc. return will quit doMove()\n","    return currLoc\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sMF6CILEEfNb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619631399132,"user_tz":300,"elapsed":777,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"263be069-d89a-4082-fe82-e612bec55dff"},"source":["doMove(20, 0.5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["21"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hg0Cw54rjZV7","executionInfo":{"status":"ok","timestamp":1619631613500,"user_tz":300,"elapsed":410,"user":{"displayName":"Ivana Kramarevsky","photoUrl":"","userId":"11510040693012026218"}},"outputId":"97dab887-7ba8-4347-fe4d-daa15c6cb918"},"source":["#simulate the random walk\n","numSteps = 100\n","k = 1\n","decFac = 0.99#decrease factor\n","\n","loc = random.randint(0,100)#starting location\n","\n","for i in range(numSteps):\n","  #make a move\n","  loc = doMove(loc, k)\n","\n","  #decrease k a little bit:\n","  k = k*decFac\n","\n","\n","print(\"location\", loc)\n","print(\"f value: \", f(loc))\n","print(\"k: \", k)\n","#minimum should be near 40 with an value of f-2\n","#this code does not reliably find the global minimum on the green graph above. \n","#maybe take more steps, fiddle with decFac, etc. "],"execution_count":null,"outputs":[{"output_type":"stream","text":["location 35\n","f value:  1.8060934986329606\n","k:  0.36603234127322926\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"a4iYhfqnkDpe"},"source":[""],"execution_count":null,"outputs":[]}]}